1
00:00:05,000 --> 00:00:11,960
在这节课中，Harrison将为大家讲解LangChain最关键的构建模块，也就是链（Chain）。
In this lesson, Harrison will teach the most important key building block of LangChain, namely the chain.

2
00:00:11,960 --> 00:00:17,440
链通常将大型语言模型（LLM）与提示词（Prompt）结合在一起。
The chain usually combines an LLM, large language model, together with a prompt.

3
00:00:17,440 --> 00:00:26,560
有了这个构建模块，你还可以将一堆这样的构建模块组合在一起，对你的文本或其他数据按顺序进行操作。
And with this building block, you can also put a bunch of these building blocks together to carry out a sequence of operations on your text or on your other data.

4
00:00:26,560 --> 00:00:28,400
我已经等不及想要深入了解它了。
I'm excited to dive into it.

5
00:00:29,000 --> 00:00:33,680
好的，首先，我们将像以前一样加载环境变量。
All right, to start, we're going to load the environment variables as we have before.

6
00:00:33,680 --> 00:00:37,360
然后我们还要加载一些即将使用的数据。
And then we're also going to load some data that we're going to use.

7
00:00:37,360 --> 00:00:44,440
这些链的强大之处在于，它们可以一次处理多个输入。
So part of the power of these chains is that you can run them over many inputs at a time.

8
00:00:44,440 --> 00:00:46,720
这里，我们将加载一个Pandas DataFrame。
Here, we're going to load a Pandas DataFrame.

9
00:00:46,720 --> 00:00:52,520
Pandas DataFrame只是一个包含许多不同数据元素的数据结构。
A Pandas DataFrame is just a data structure that contains a bunch of different elements of data.

10
00:00:52,520 --> 00:00:54,600
如果你不熟悉Pandas，不用担心。
If you're not familiar with Pandas, don't worry about it.

11
00:00:54,600 --> 00:00:58,720
这里的重点是，我们正在加载一些数据，稍后将会被用到。
The main point here is that we're loading some data that we can then use later on.

12
00:00:58,760 --> 00:01:04,400
如果我们查看这个Pandas DataFrame，可以看到有一个产品列和一个评论列。
And so if we look inside this Pandas DataFrame, we can see that there is a product column and then a review column.

13
00:01:04,400 --> 00:01:08,680
这些行中的每一行都是一个不同的数据记录，我们可以开始通过我们的链进行传递。
And each of these rows is a different data point that we can start passing through our chains.

14
00:01:08,680 --> 00:01:12,280
首先我们要介绍的链是LLMChain。
So the first chain we're going to cover is the LLMChain.

15
00:01:12,280 --> 00:01:18,400
这是一个简单但非常强大的链，后面要介绍的很多链它都能支持。
And this is a simple but really powerful chain that underpins a lot of the chains that we'll go over in the future.

16
00:01:18,400 --> 00:01:21,360
我们将导入三个不同的库。
And so we're going to import three different things.

17
00:01:21,360 --> 00:01:25,080
我们将导入OpenAI模型，即LLM。
We're going to import the OpenAI model, so the LLM.

18
00:01:25,080 --> 00:01:28,640
我们将导入ChatPromptTemplate，这是提示词（Prompt）相关的。
We're going to import the ChatPromptTemplate. And so this is the prompt.

20
00:01:28,640 --> 00:01:30,160
然后我们将导入LLMChain。
And then we're going to import the LLMChain.

21
00:01:30,160 --> 00:01:36,240
首先，我们要初始化我们想要使用的语言模型。
And so first, what we're going to do is we're going to initialize the language model that we want to use.

22
00:01:36,240 --> 00:01:44,120
我们将用一个比较高的temperature值来初始化ChatOpenAI，这样能获得一些有意思的结果。
So we're going to initialize the ChatOpenAI with a high temperature so that we can get some fun descriptions.

23
00:01:44,120 --> 00:01:49,160
现在我们要初始化一个提示词模板，这个提示词模板将接收一个名为产品（product）的变量。
Now we're going to initialize a prompt, and this prompt is going to take in a variable called product.

24
00:01:49,160 --> 00:01:54,880
它会要求LLM根据产品名称，为制作该产品的公司取一个最佳的公司描述名称。
It's going to ask the LLM to generate what the best name is to describe a company that makes that product.

25
00:01:55,720 --> 00:01:59,280
最后，我们将这两者结合成一条链。
And then finally, we're going to combine these two things into a chain.

26
00:01:59,280 --> 00:02:03,000
这就是我们所说的LLMChain，非常简单。
And so this is what we call an LLMChain, and it's quite simple.

27
00:02:03,000 --> 00:02:06,280
它只是LLM和提示词模板的结合。
It's just the combination of the LLM and the prompt.

28
00:02:06,280 --> 00:02:11,560
这条链将提示词模板和LLM按顺序连接起来。
But now this chain will let us run through the prompt and into the LLM in a sequential manner.

29
00:02:11,560 --> 00:02:17,960
如果我们有一个名为“双人床床单套装”的产品，我们可以通过使用“chain.run”将它传入链，并运行链。
And so if we have a product called "Queen Size Sheet Set", we can run this through the chain by using "chain.run".

30
00:02:17,960 --> 00:02:24,200
它会在后台格式化提示词，然后将格式化后的提示词传给LLM。
And what    will do is it will format the prompt under the hood, and then it will pass the whole prompt into the LLM.

31
00:02:24,600 --> 00:02:29,520
我们可以看到LLM给这个生产床单的公司取了个名字叫做"皇家寝具"。
And so we can see that we get back the name of this hypothetical company called "Royal Beddings".

32
00:02:29,520 --> 00:02:37,400
建议你暂停视频，去Notebook输入你想要的产品描述，看看这条链会输出什么结果。
so here would be a good time to pause, and you can input any product descriptions that you would want, and you can see what the chain will output as a result.

33
00:02:37,400 --> 00:02:43,840
LLMChain是最基本的链类型，以后经常会被用到。
So the LLMChain is the most basic type of chain, and that's going to be used a lot in the future.

34
00:02:43,840 --> 00:02:48,600
我们来看看下一种常用的链，也就是"顺序链（Sequential Chains）"。
And so we can see how this will be used in the next type of chain, which will be "Sequential Chains".

35
00:02:48,600 --> 00:02:52,720
顺序链是将一系列链一个接一个地运行。
And so Sequential Chains run a sequence of chains one after another.

36
00:02:53,200 --> 00:02:57,040
首先，你需要导入SimpleSequentialChain。
So to start, you're going to import the SimpleSequentialChain.

37
00:02:57,040 --> 00:03:02,200
当我们的子链都只需要一个输入并且只返回一个输出时，这个方法很有用。
And this works well when we have sub chains that expect only one input and return only one output.

38
00:03:02,200 --> 00:03:08,360
这里我们首先创建一条链，它使用LLM和提示词模板。
And so here we're going to first create one chain, which uses an LLM and a prompt.

39
00:03:08,360 --> 00:03:14,840
这个提示词模板将接受输入一个产品参数，并返回最佳的产品所属公司描述名称。
And this prompt is going to take in the product and will return the best name to describe that company.

40
00:03:14,840 --> 00:03:16,240
那将是第一条链。
So that will be the first chain.

41
00:03:16,240 --> 00:03:19,280
然后我们要创建第二条链。
Then we're going to create a second chain.

42
00:03:19,760 --> 00:03:26,320
第二条链会接收公司名称，然后输出一个20字的公司描述。
And the second chain will take in the company name and then output a 20 word description of that company.

43
00:03:26,320 --> 00:03:31,000
你可以想象这些链需要一条接一条地运行，
And so you can imagine how these chains might want to be run one after another,

44
00:03:31,000 --> 00:03:35,320
其中第一条链会输出公司名称，然后会将它传递给第二条链。
where the output of the first chain, the company name is then passed into the second chain.

45
00:03:35,320 --> 00:03:42,680
通过创建一个SimpleSequentialChain我们可以很容易的实现这一点，参数中包含了两条链的描述。
We can easily do this by creating a SimpleSequentialChain where we have the two chains described there.

46
00:03:42,680 --> 00:03:45,320
我们将这条链命名为overall_simple_chain。
And we'll call this overall_simple_chain.

47
00:03:47,240 --> 00:03:52,240
现在，你可以在任何产品描述上运行这条链。
Now, what you can do is run this chain over any product description.

48
00:03:52,240 --> 00:03:57,114
我们可以用之前的“双人床床单套装”来测试，
And so if we use it with the product above the "Queen Size Sheet Set",

49
00:03:57,115 --> 00:04:00,557
让我们运行它看看，先是输出了“皇家寝具”，
we can run it over and we can see that at first outputs "Royal Bedding",

50
00:04:00,558 --> 00:04:06,280
然后将它传递到第二条链，得出关于该公司可能的描述。
and then it passes it into the second chain and it comes up with this description of what that company could be about.

51
00:04:06,280 --> 00:04:12,840
简单顺序链（SimpleSequentialChain）在只有一个输入和一个输出时表现非常好。
The simple sequential chain(SimpleSequentialChain) works well when there's only a single input and a single output.

52
00:04:12,840 --> 00:04:16,680
但是当有多个输入或多个输出时该怎么办？
But what about when there are multiple inputs or multiple outputs?

53
00:04:16,920 --> 00:04:20,080
我们可以通过使用常规的SequentialChain来实现这一点。
And so we can do this by using just the regular SequentialChain.

54
00:04:20,080 --> 00:04:22,120
让我们导入它。
So let's import that.

55
00:04:22,120 --> 00:04:25,920
然后你可以创建一系列链，后面我们将依次调用这些链。
And then you're going to create a bunch of chains that we're going to use one after another.

56
00:04:25,920 --> 00:04:29,160
我们将使用上面的数据，其中包含一篇评论。
We're going to be using the data from above, which has a review.

57
00:04:29,160 --> 00:04:34,840
首先，我们将用第一条链将评论翻译成英语。
And so the first chain, we're going to take the review and translate it into English.

58
00:04:34,840 --> 00:04:41,840
然后用第二条链，我们将用一句话总结这篇评论。
With a second chain, we're going to create a summary of that review in one sentence.

59
00:04:41,840 --> 00:04:46,840
这里用的是之前生成的英语评论。
And this will use the previously generated English review.

60
00:04:47,360 --> 00:04:54,200
第三条链将检测评论最初是用什么语言写的。
The third chain is going to detect what the language of the review was in the first place.

61
00:04:54,200 --> 00:05:00,280
注意看，这里使用的是"Review"变量，表示原始的评论。
And so if you notice, this is using the review variable that is coming from the original review.

62
00:05:00,280 --> 00:05:05,480
最后，第四条链将接收多个输入。
And finally, the fourth chain will take in multiple inputs.

63
00:05:05,480 --> 00:05:13,280
它将接收我们用第二条链得到的摘要"summary"变量和我们用第三条链得到的语言"language"变量。
So this will take in the summary variable, which we calculated with the second chain and the language variable, which we calculated with the third chain.

64
00:05:13,760 --> 00:05:18,280
要求后续对摘要回复时，使用指定的语言。
And it's going to ask for a follow up response to the summary in the specified language.

65
00:05:18,280 --> 00:05:25,960
关于所有这些子链，需要注意的是输入名和输出名需要非常精确，这非常重要。
One important thing to note about all these sub chains is that the input keys and output keys need to be pretty precise.

66
00:05:25,960 --> 00:05:28,520
所以这里我们接收"Review"。
So here we're taking in review.

67
00:05:28,520 --> 00:05:31,120
这是一个在开始时传入的变量。
This is a variable that will be passed in at the start.

68
00:05:31,120 --> 00:05:35,320
我们可以看到我们明确设置了输出名为"English_Review"。
We can see that we explicitly set the output key to English review.

69
00:05:35,320 --> 00:05:42,040
这在下面的下一个提示中使用，我们用相同的变量名接收"English_Review"。
This is then used in the next prompt down below, where we take in English review with that same variable name.

70
00:05:42,800 --> 00:05:47,840
我们将该链的输出名设置为"summary"，我们可以看到它在最后一条链中使用。
And we set the output key of that chain to summary, which we can see is used in the final chain.

71
00:05:47,840 --> 00:05:56,080
第三个提示词模板接收原始的"Review"变量和输出"language"，这些在最后的提示词模板中会被再次使用。
The third prompt takes in review, the original variable and output language, which is again used in the final prompt.

72
00:05:56,080 --> 00:06:03,400
因为有很多不同的输入和输出一起运行，确保这些变量名称完全一致非常重要。
It's really important to get these variable names lined up exactly right, because there's so many different inputs and outputs going on.

74
00:06:03,400 --> 00:06:07,200
如果出现任何关键性的错误，一定要检查变量名是否一致。
And if you get any key errors, you should definitely check that they are lined up.

75
00:06:07,200 --> 00:06:14,680
简单顺序链（Simple Sequential Chain）接收多条链，每条链都有一个输入和一个输出。
So the Simple Sequential Chain takes in multiple chains, where each one has a single input and a single output.

76
00:06:14,680 --> 00:06:23,720
一图胜千言，可以看这张幻灯片的图示，一条链的输出传入另一条链作为输入，一个接一个。
To see a visual representation of this, we can look at the slide where it has one chain feeding into the other chain, one after another.

77
00:06:23,720 --> 00:06:29,640
在这里，我们可以看到顺序链（Sequential Chain）的图示，并把它跟前面的简单顺序链进行比较。
Here we can see a visual description of the sequential chain, comparing it to the above chain.

78
00:06:29,640 --> 00:06:34,360
你会注意到链中的任何步骤都可以接收多个输入变量。
You can notice that any step in the chain can take in multiple input variables.

79
00:06:34,960 --> 00:06:41,960
当你有复杂的下游链需要和多个上游链组合，这会非常有用。
This is useful when you have more complicated downstream chains that need to be a composition of multiple previous chains.

80
00:06:41,960 --> 00:06:47,440
有了所有这些链之后，我们可以轻松地将它们组合在顺序链（SequentialChain）中。
Now that we have all these chains, we can easily combine them in the SequentialChain.

81
00:06:47,440 --> 00:06:53,440
首先，我们将创建的四条链作为数组保存到chains变量。
So you'll notice here that we'll pass in the four chains we created into the chains variable.

82
00:06:53,440 --> 00:06:58,440
我们用一个人类输入也就是"Review"来创建"inputs_variables"。
We'll create the inputs variable with the one human input, which is the review.

83
00:06:58,440 --> 00:07:02,680
然后我们想返回所有中间输出：
And then we want to return all of the intermediate outputs.

84
00:07:02,680 --> 00:07:05,520
"English_Review"、"summary"，然后是"followup_message"。
So the English review, the summary, and then the follow-up message.

85
00:07:05,520 --> 00:07:10,480
现在我们可以传一些数据来运行试试。
Now we can run this over some of the data.

86
00:07:10,480 --> 00:07:15,280
让我们选择一条评论并传递给整条链。
So let's choose a review and pass it in through the overall chain.

87
00:07:15,280 --> 00:07:25,400
我们可以看到原始的"Review"似乎是法语的。
We can see here that the original review looks like it was in French.

88
00:07:25,400 --> 00:07:28,480
我们可以看到"English_Review"作为翻译。
We can see the English review as a translation.

89
00:07:28,480 --> 00:07:35,080
我们可以看到评论的"summary"，然后我们可以看到法语的"followup_message"。
We can see a summary of that review, and then we can see a follow-up message in the original language of French.

90
00:07:35,080 --> 00:07:39,120
建议你暂停视频，尝试输入不同的内容，并运行看看效果。
You should pause the video here and try putting in different inputs.

91
00:07:39,120 --> 00:07:43,360
到目前为止，我们已经介绍了LLMChain和顺序链（Sequential Chain）。
So far we've covered the LLMChain and then a Sequential Chain.

92
00:07:43,360 --> 00:07:46,440
但是，如果你想完成更复杂的任务呢？
But what if you want to do something more complicated?

93
00:07:46,440 --> 00:07:53,160
一个相当常见的基本操作是，根据输入内容路由到某条链来处理你的输入。
A pretty common but basic operation is to route an input to a chain, depending on what exactly that input is.

94
00:07:53,720 --> 00:08:03,000
可以想象以下，如果你有多条子链，每条子链专门负责处理某种特定类型的输入，这种情况下你可以使用路由链（Router Chain），
A good way to imagine this is if you have multiple subchains, each of which specialized for a particular type of input, you could have a Router Chain,

95
00:08:03,000 --> 00:08:07,560
它首先判断该使用哪条子链，然后将输入传递到相应的子链。
which first decides which subchain to pass it to, and then passes it to that chain.

96
00:08:07,560 --> 00:08:16,960
举一个具体的例子来看看我们如何根据输入的内容来路由到不同类型的链。
For a concrete example, let's look at where we are routing between different types of chains, depending on the subject that seems to come in.

97
00:08:16,960 --> 00:08:19,920
这里我们有不同的提示词。
So we have here different prompts.

98
00:08:19,920 --> 00:08:22,760
一个提示词适合回答物理问题。
One prompt is good for answering physics questions.

99
00:08:22,880 --> 00:08:28,560
第二个提示词适合回答数学问题，第三个提示词适合历史，第四个提示词适合计算机科学。
The second prompt is good for answering math questions, the third for history, and then a fourth for computer science.

100
00:08:28,560 --> 00:08:31,160
让我们定义所有这些提示词模板。
Let's define all these prompt templates.

101
00:08:31,160 --> 00:08:39,040
有了这些提示模板后，我们可以提供更多关于它们的信息。
After we have these prompt templates, we can then provide more information about them.

102
00:08:39,040 --> 00:08:42,320
可以给每个模板起个名字，然后写个描述。
We can give each one a name and then a description.

103
00:08:42,320 --> 00:08:46,640
这个物理模板的描述非常适合回答物理问题。
This description for the physics one is good for answering questions about physics.

104
00:08:46,640 --> 00:08:54,080
这些信息将传递给路由链，路由链会根据这些信息来决定什么时候该使用哪条子链。
This information is going to be passed to the router chain, so the router chain can decide when to use this subchain.

105
00:08:59,857 --> 00:09:02,840
现在让我们导入其他需要的链类型。
Let's now import the other types of chains that we need.

106
00:09:02,840 --> 00:09:05,040
这里我们需要用MultiPromptChain，
Here we need a MultiPromptChain.

107
00:09:05,040 --> 00:09:10,640
这是一种特定类型的链，可以用来在多个不同提示词模板之间路由。
This is a specific type of chain that is used when routing between multiple different prompt templates.

108
00:09:10,640 --> 00:09:17,800
如你所见，我们所有的选项都是提示模板，但实际上不止是可以路由这一种类型，
As you can see, all the options we have are prompt templates themselves, but this is just one type of thing that you can route between.

109
00:09:17,840 --> 00:09:20,240
除此之外你也可以在任何其他类型的链之间路由。
You can route between any type of chain.

110
00:09:20,240 --> 00:09:24,120
这里还需要引用LLMRouterChain。
The other classes that we'll import here are an LLMRouterChain.

111
00:09:24,120 --> 00:09:28,480
这个程序借助大语言模型的帮助在不同的子链之间路由。
This uses a language model itself to route between the different subchains.

112
00:09:28,480 --> 00:09:32,040
这就是为什么上面需要提供名称和描述，语言模型根据这些信息判断如何路由。
This is where the description and the name provided above will be used.

113
00:09:32,040 --> 00:09:35,040
我们还要导入一个RouterOutputParser。
We'll also import a RouterOutputParser.

114
00:09:35,040 --> 00:09:44,240
这个解析器将LLM输出解析成一个字典，根据字典的内容可以在下游确定使用哪条链，以及该链的输入应该是什么。
This parses the LLM output into a dictionary that can be used downstream to determine which chain to use and what the input to that chain should be.

115
00:09:47,600 --> 00:09:49,040
现在我们可以开始使用它了。
Now we can get around to using it.

116
00:09:49,040 --> 00:09:53,720
首先，让我们导入并定义将要使用的语言模型。
First, let's import and define the language model that we will use.

117
00:09:53,720 --> 00:09:59,040
接下来创建目标链，
We now create the destination chains.

118
00:09:59,040 --> 00:10:01,880
路由链会根据输入的内容来调用这些目标链之一。
These are the chains that will be called by the router chain.

119
00:10:01,880 --> 00:10:07,160
如你所见，每个目标链本身就是一个语言模型链，即LLMChain。
As you can see, each destination chain itself is a language model chain, an LLMChain.

120
00:10:07,160 --> 00:10:12,840
除了目标链，我们还需要一个默认链。
In addition to the destination chains, we also need a default chain.

121
00:10:12,840 --> 00:10:17,840
默认链是在路由找不到合适的子链调用时，用来备用的一条链路。
This is a chain that's called when the router can't decide which of the subchains to use.

122
00:10:17,840 --> 00:10:25,840
在上面的例子中，当输入问题与物理、数学、历史或计算机科学无关时，就会调用这条链路。
And the example above, this might be called when the input question has nothing to do with physics, math, history, or computer science.

123
00:10:25,840 --> 00:10:33,840
现在我们定义一个路由的提示词模板，让LLM根据提示词的内容在不同链之间路由。
Now we define the template that is used by the LLM to route between the different chains.

124
00:10:33,840 --> 00:10:40,440
这里包含了完成任务的说明，以及输出内容的的格式。
This has instructions of the task to be done, as well as the specific formatting that the output should be in.

125
00:10:40,440 --> 00:10:44,840
让我们把这些部分组合起来，构建路由链。
Let's put a few of these pieces together to build the router chain.

126
00:10:45,640 --> 00:10:50,480
首先，我们通过使用上面定义的目标来创建完整的路由模板。
First, we create the full router template by formatting it with the destinations that we defined above.

127
00:10:50,480 --> 00:10:54,320
这个模板适用于许多不同类型的目标。
This template is flexible to a bunch of different types of destinations.

128
00:10:54,320 --> 00:10:58,520
建议你在这里暂停，然后尝试添加不同类型的目标。
One thing you can do here is pause and add different types of destinations.

129
00:10:58,520 --> 00:11:05,000
在这里，除了物理、数学、历史和计算机科学，你还可以添加其他学科，如英语或拉丁语。
So up here, rather than just physics, math, history, and computer science, you could add a different subject like English or Latin.

130
00:11:05,000 --> 00:11:14,240
接下来，我们从这个模板创建提示词模板，然后传入LLM和整个路由器提示词，创建路由链。
Next, we create the prompt template from this template, and then we create the router chain by passing in the LLM and the overall router prompt.

131
00:11:15,080 --> 00:11:17,440
注意这里有RouterOutputParser。
Note that here we have the RouterOutputParser.

132
00:11:17,440 --> 00:11:23,240
这很重要，因为它会帮助决定这条链在哪些子链之间路由。
This is important as it will help this chain decide which subchains to route between.

133
00:11:25,557 --> 00:11:30,000
最后，把所有内容放在一起，我们可以创建整条链。
And finally, putting it all together, we can create the overall chain.

134
00:11:30,000 --> 00:11:33,520
这里有一个路由链，定义在这里，
This has a router chain, which is defined here.

135
00:11:33,520 --> 00:11:36,280
它有目标链，我们在这里传入。
It has destination chains, which we pass in here.

136
00:11:36,280 --> 00:11:38,280
然后传入默认链，
And then we also pass in the default chain.

137
00:11:38,280 --> 00:11:41,200
现在可以使用这条链了。
We can now use this chain.

138
00:11:41,200 --> 00:11:43,120
让我们向它提问试试。
So let's ask it some questions.

139
00:11:43,760 --> 00:11:53,900
如果我们问一个关于物理的问题，希望能看到它被路由到物理链，输入是“什么是黑体辐射？”
If we ask it a question about physics, we should hopefully see that it is routed to the physics chain with the input, "What is black body radiation?",

140
00:11:53,901 --> 00:11:56,680
然后这个问题会传到下面的链。
and then that is passed into the chain down below.

141
00:11:56,680 --> 00:12:02,240
可以看到回复非常详细，包含了很多物理细节。
And we can see that the response is very detailed with lots of physics details.

142
00:12:02,240 --> 00:12:06,560
建议你在这里暂停视频，自己尝试输入不同的内容试试。
You should pause the video here and try putting in different inputs.

143
00:12:06,560 --> 00:12:12,040
可以尝试我们之前定义的路由链中的其他链。
You can try with all the other types of special chains that we have defined above.

144
00:12:12,640 --> 00:12:16,057
比如，如果问一个数学问题，
So for example, if we ask it a math question,

145
00:12:23,329 --> 00:12:27,160
应该看到它被路由到数学链，然后把问题传入数学链。
we should see that it's routed to the math chain and then passed into that.

146
00:12:31,971 --> 00:12:37,560
还可以试试当我们提出一个与这些子链都无关的问题时会发生什么。
We can also see what happens when we pass in a question that is not related to any of the subchains.

147
00:12:37,560 --> 00:12:43,160
这里我们问一个关于生物学的问题，可以看到它选择的链是“无”。
So here we ask it a question about biology and we can see the chain that it chooses is "None".

148
00:12:43,160 --> 00:12:48,760
这意味着问题会被传递到默认链，也就是直接当做一个通用问题去问语言模型。
This means that it will be passed to the default chain, which itself is just a generic call to the language model.

149
00:12:48,760 --> 00:12:52,360
幸运的是，语言模型对了解很多生物学知识，所以它还是可以帮助我们回答这个问题。
The language model luckily knows a lot about biology, so it can help us out here.

150
00:12:52,360 --> 00:13:00,200
现在我们已经学习了这些基本的构建块类型的链，我们可以尝试将它们组合在一起，创建有趣的应用。
Now that we've covered these basic building blocks types of chains, we can start to put them together to create really interesting applications.

151
00:13:00,200 --> 00:13:06,400
在下一节课程中，我们将介绍如何创建一个可以基于文档问答的链。
For example, in the next section, we're going to cover how to create a chain that can do question answering over your documents.
