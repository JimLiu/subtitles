大家好，我是Benoit Dherin。我是Google Advanced Solutions Lab的机器学习工程师。如果你想了解更多关于Advanced Solutions Lab的信息，请点击下方描述框中的链接。目前，围绕生成性AI以及包括新的Vertex AI特性（如GenAI Studio、Model Garden、Gen AI API）在内的新进展，大家都非常兴奋。我们在这些短期课程中的目标是让你对一些使得所有GenAI魔法成为可能的基础概念有一个扎实的理解。

今天，我将讲解编码器-解码器架构，这是大型语言模型的核心。我们将从对架构的简要概述开始。然后我将讲解我们如何训练这些模型。最后，我们将看到如何在服务时间从训练好的模型中生成文本。首先，编码器-解码器架构是一种序列到序列的架构。这意味着它接收，比如说，一个单词序列作为输入，就像英语句子“The cat ate the mouse”，然后它输出，比如说，法语的翻译“Le chat a mange la souris”。编码器-解码器架构是一个消耗序列并吐出序列的机器。另一个输入示例是形成发送给大型语言模型提示的单词序列。然后输出是大型语言模型对这个提示的响应。

现在我们知道了编码器-解码器架构做什么。但是它是如何做到的呢？通常，编码器-解码器架构有两个阶段。首先，一个编码器阶段，它生成输入句子的向量表示。然后这个编码器阶段后面跟着一个解码器阶段，它创建序列输出。编码器和解码器都可以用不同的内部架构来实现。内部机制可以是这个幻灯片中显示的递归神经网络，或者像我们现在看到的超强大的语言模型中的更复杂的变压器块。

一个递归神经网络编码器一次接收输入序列中的每个令牌，并生成代表这个令牌以及之前摄取的令牌的状态。然后这个状态在下一个编码步骤中被用作输入，与下一个令牌一起生成下一个状态。一旦你完成了将所有的输入令牌摄入RNN，你就输出一个代表完整输入句子的向量。这就是编码器的全部内容。那解码器部分呢？解码器接收输入句子的向量表示，并从该表示中生成输出句子。

在RNN解码器的情况下，它会分步进行，使用当前状态和到目前为止解码的内容一次解码一个令牌。好的，现在我们对编码器-解码器架构有了高级理解，那我们如何训练它呢？这就是训练阶段。要训练一个模型，你需要一个数据集，也就是你希望你的模型模仿的输入/输出对的集合。然后你可以将这个数据集提供给模型，模型在训练过程中会根据它在数据集中给定输入产生的错误来修正它的权重。这个错误基本上是神经网络生成的输入序列和你在数据集中有的真实输出序列之间的差异。

好的。但是你如何生成这个数据集呢？在编码器-解码器架构的情况下，这比典型的预测模型更复杂。首先你需要一组输入和输出文本。在翻译的情况下，那将是句子对，其中一句是源语言，另一句是目标语言。你将源语言句子提供给编码器，然后计算解码器生成的内容和实际翻译之间的错误。然而，有一个问题。在训练时，解码器也需要它自己的输入！你需要给解码器提供正确的前一个翻译令牌作为输入，以生成下一个令牌，而不是到目前为止解码器生成的内容。这种训练方法被称为教师强制，因为你强制解码器从正确的前一个令牌生成下一个令牌。这意味着在你的代码中，你需要准备两个输入句子，一个是提供给编码器的原始句子，还有一个是向左移动的原始句子，你将提供给解码器。

另一个微妙的点是，解码器在每个步骤中只生成每个令牌在你的词汇表中是下一个的概率。使用这些概率，你需要选择一个词。有几种方法可以做到这一点。最简单的一种，称为贪婪搜索，是生成概率最高的令牌。一个产生更好结果的更好的方法被称为束搜索。在这种情况下，你使用解码器生成的概率来评估句子块的概率，而不是单个词。并且你在每个步骤中保留最可能生成的块。这就是训练的方式。
现在，我们来讨论模型的服务阶段。

在训练完成后，在服务阶段，比如你想生成新的翻译或对某个提示的新回应时，你会首先将提示的编码器表示连同像“GO”这样的特殊令牌一起输入到解码器中。这将促使解码器生成第一个词。让我们详细看一下在生成阶段会发生什么。

首先，开始令牌需要通过嵌入层被表示为一个向量。然后，循环层将会更新编码器生成的先前状态，使其成为新的状态。这个状态将被传递到一个密集的 softmax 层来产生词概率。最后，通过贪婪搜索或者束搜索取概率最高的令牌或者最高概率的块来生成词语。在这一点上，你需要为生成的第二个词重复这个过程。然后是第三个词，直到你完成！

接下来是什么呢？

嗯，我们刚刚学习的架构和大型语言模型中的架构之间的差异在于编码器和解码器块中的内容。简单的 RNN 网络被替换为 Transformer 块，这是一种在 Google 发现的基于注意力机制的架构。如果你对这些主题感兴趣，我们还有另外两门概述课程：注意力机制：概述，以及 Transformer 模型和 BERT 模型：概述。

另外，如果你喜欢今天的课程，可以看看“编码器-解码器架构：实验演示”，在那里，我将向你展示如何使用我们在这个概述中看到的概念在代码中生成诗歌。

感谢你的时间！祝你有美好的一天！