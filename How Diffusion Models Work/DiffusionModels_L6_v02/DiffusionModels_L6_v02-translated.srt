1
00:00:05,000 --> 00:00:13,640
在这个视频中，你将了解一种新的采样方法，它比我们迄今为止使用的DDPM高效10倍以上。

2
00:00:13,640 --> 00:00:16,360
这种新方法叫做DDIM。

3
00:00:16,360 --> 00:00:20,680
你的目标是想要更多的图片，并且快速得到它们。

4
00:00:20,680 --> 00:00:26,000
但是到目前为止，采样速度很慢，因为涉及到很多时间步骤，

5
00:00:26,000 --> 00:00:29,960
比如500个，有时甚至更多才能得到一个好的样本。

6
00:00:29,960 --> 00:00:33,080
而且每个时间步骤都依赖于前一个。

7
00:00:33,080 --> 00:00:36,600
它遵循一个马尔可夫链过程。

8
00:00:36,600 --> 00:00:43,960
但幸运的是，有许多新的采样器来解决这个问题，因为这一直是扩散模型的一个长期问题。

9
00:00:43,960 --> 00:00:49,614
你可以训练它们，它们可以创造出既多样又逼真的惊人美丽的图像，

10
00:00:49,615 --> 00:00:52,520
但从它们那里得到结果的速度非常慢。

11
00:00:52,520 --> 00:01:01,400
其中一种非常受欢迎的采样器叫做DDIM，即去噪扩散隐式模型，这只是论文的名字。

12
00:01:01,400 --> 00:01:08,120
这篇论文是由Jiaming Song、Chenlin Meng和我的博士联合导师Stefano Ermon共同完成的。

13
00:01:08,120 --> 00:01:12,440
DDIM之所以更快，是因为它能跳过时间步长。

14
00:01:12,440 --> 00:01:19,280
所以它不是从500步到499步再到498步，而是能跳过所有这些步骤。

15
00:01:19,280 --> 00:01:23,840
它能跳过很多步骤，因为它打破了马尔可夫假设。

16
00:01:23,840 --> 00:01:26,760
马尔可夫链只用于概率过程。

17
00:01:26,760 --> 00:01:33,800
但DDIM实际上从这个采样过程中去除了所有的随机性，因此是确定性的。

18
00:01:33,800 --> 00:01:40,140
它所做的，本质上就是预测最终输出的粗略草图。

19
00:01:40,140 --> 00:01:44,560
然后用去噪过程对其进行细化。

20
00:01:44,560 --> 00:01:51,200
那么让我们比较一下左边的DDPM，这是我们迄今为止一直在做的，和右边的DDIM。

21
00:01:51,200 --> 00:01:54,760
是的，使用DDIM速度快很多。

22
00:01:54,760 --> 00:02:00,560
在时间步19之后，你立即就能看到一个有形的结果。

23
00:02:00,560 --> 00:02:02,480
我们还在继续使用DDPM。

24
00:02:02,480 --> 00:02:04,240
我们还在继续。

25
00:02:04,240 --> 00:02:08,760
而且这一直可以用DDPM达到500。

26
00:02:08,760 --> 00:02:11,760
好的，这里是实验课。

27
00:02:11,760 --> 00:02:13,360
很多设置看起来都一样。

28
00:02:13,360 --> 00:02:22,560
我只是在这里运行这个单元格，重新设置单位，我们的超参数。

29
00:02:22,560 --> 00:02:24,360
这是DDPM噪声计划。

30
00:02:24,360 --> 00:02:27,560
稍后我们会用它来和DDIM进行比较。

31
00:02:27,560 --> 00:02:30,000
现在我正在实例化模型。

32
00:02:30,000 --> 00:02:32,600
这里是用DDIM进行快速采样的地方。

33
00:02:32,600 --> 00:02:35,560
这是DDIM的功能。

34
00:02:35,560 --> 00:02:42,080
可以查看论文了解细节，但这里实现了相应的缩放因子。

35
00:02:42,080 --> 00:02:44,480
然后我们在这里加载训练好的模型。

36
00:02:44,480 --> 00:02:49,600
很酷的是，我们可以直接加载训练好的模型，使用DDIM或DDPM。

37
00:02:49,600 --> 00:02:50,600
这都没关系。

38
00:02:50,600 --> 00:02:53,040
这只是训练后的采样过程。

39
00:02:53,040 --> 00:02:55,360
这是使用DDIM的采样算法。

40
00:02:55,360 --> 00:02:58,480
需要指出的是，这里涉及到一个步长。

41
00:02:58,480 --> 00:03:00,720
我们没有逐个时间步骤地进行。

42
00:03:00,720 --> 00:03:02,800
实际上我们在这里跳过了一些步骤。

43
00:03:02,800 --> 00:03:05,600
这里的n是20。

44
00:03:05,600 --> 00:03:08,200
所以这是500除以20。

45
00:03:08,200 --> 00:03:10,800
我们将在这里运行。

46
00:03:10,800 --> 00:03:11,960
然后我们可以进行采样。

47
00:03:11,960 --> 00:03:13,240
这速度快了很多。

48
00:03:13,240 --> 00:03:16,040
我几乎看不到那里。

49
00:03:16,040 --> 00:03:19,080
现在正在合成GIF。

50
00:03:19,080 --> 00:03:21,440
我们会加快合成GIF的视频速度。

51
00:03:21,440 --> 00:03:22,720
好了！

52
00:03:22,720 --> 00:03:26,120
这就是它的样子。

53
00:03:26,120 --> 00:03:31,640
它能够瞬间变成这些游戏角色，速度非常快。

54
00:03:31,640 --> 00:03:38,480
现在用这种更快的采样方法，你并不总能得到和使用DDPM一样的质量。

55
00:03:38,480 --> 00:03:40,560
但这些实际上看起来相当不错。

56
00:03:40,560 --> 00:03:46,080
实际上，人们发现，用在这500步上训练的模型，例如，

57
00:03:46,080 --> 00:03:49,600
如果你采样500步，DDPM的表现会更好。

58
00:03:49,600 --> 00:03:54,720
但对于任何小于500步的数字，DDIM的表现会好得多。

59
00:03:54,720 --> 00:03:57,560
现在这里是相同的，但带有上下文模型。

60
00:03:57,560 --> 00:03:58,920
所以你可以加载那个上下文。

61
00:04:02,920 --> 00:04:03,680
太棒了！

62
00:04:03,680 --> 00:04:05,600
这些只是随机的上下文。

63
00:04:05,600 --> 00:04:07,440
但你们也可以自己设置。

64
00:04:07,440 --> 00:04:10,200
它们是这样的。

65
00:04:10,200 --> 00:04:15,040
那么现在你们可能会问速度如何对比？

66
00:04:15,040 --> 00:04:21,440
我们可以加载原始的DDPM函数和采样算法。

67
00:04:21,440 --> 00:04:24,120
然后我们可以在这个Notebook中使用 timeit 进行比较。

68
00:04:24,120 --> 00:04:26,280
我们将比较DDIM和DDPM。

69
00:04:31,280 --> 00:04:32,840
好了

70
00:04:32,840 --> 00:04:34,040
看看这个速度提升。

71
00:04:34,040 --> 00:04:35,120
哇！

72
00:04:35,120 --> 00:04:37,880
试着在你们自己的Notebook中运行这些，看看结果如何。
