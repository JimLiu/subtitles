在这个视频中，我们将介绍\N神经网络和它的架构，以及\N如何将额外信息融入其中。 我们用于扩散模型的\N神经网络架构是一个UNet。 关于UNet最重要的是， 它将图像作为输入，\N输出与图像大小相同的预测噪声。 UNet已经存在\N很长时间了，自2015年以来，\N它首次被用于图像分割。 它最初被用来\N将一张图片中的行人或汽车分割出来， 因此在自动驾驶汽车\N研究中得到了广泛应用。 但UNet的特殊之处在于\N其输入和输出大小相同。 它首先将这个输入的信息嵌入， 通过许多卷积层将其降采样\N到一个压缩了所有信息的嵌入中， 然后用相同数量的\N上采样块将输出返回到任务中。 在这个例子中，它的任务\N就是预测应用到这个图片上的噪音。 如果你想深入了解，\N我们可以一起来看看， 这些命名块在代码中\N也用相同的名称显示。 这个预测的噪声与原始输入\N图像的尺寸相同，16x16x3。 UNet的另一个优点是\N它可以接收额外的信息。 所以它压缩了图像以了解发生\N了什么，但也可以接收更多信息。 那么我们想要包括拿些信息呢？ 对于这些模型来说，\N一个非常重要的信息就是时间嵌入。 这是一种告诉模型时间步长的嵌入， 因此我们需要某种级别的噪音。 对于这个时间嵌入，你需要\N做的就是将它嵌入到一个向量中， 然后将其添加到这些上采样块中。 另一个有用的信息是上下文嵌入。 我们稍后会更深入地讨论\N这个，但上下文嵌入的作用就是\N帮助你控制模型生成的内容。 例如，一个文本描述，\N你想让它生成的是Bob，或者\N某种因子，比如需要是某种颜色。 稍后我们会再讨论这个问题。 对于这个上下文嵌入，\N你只需要将它乘进去就可以了。 很好！ 那么这在代码中是什么样子的呢？ 这里你可以看到一个上下文嵌入。 这只是其中之一。 然后在这里你可以看到时间嵌入。 在上采样模块中，你需要\N做的就是像图示中那样， 把上下文嵌入乘以上采样块，\N然后加上时间嵌入。 很好！ 那么现在，在 Notebook 的\N模型前向传递中，这就是运行模型， 你可以看到一些这样的下采样块，\N然后也有这些上采样块。 再次强调，这里是\N你的上下文和时间嵌入。 我们在这里为每一个\N上采样块都设置了两个。 这些上采样和下采样块是如何定义\N的，是在UNet的初始化部分定义的。 所以对于下采样，这就是\N一个UNet下采样的样子。 如果你想详细了解的话我们实际\N上在我们的辅助函数中也有这个。 但它们就是卷积块。 在下一个视频中，你将\N学会如何训练这个神经网络。