1
00:00:05,000 --> 00:00:13,200
在这个视频中，我们将介绍神经网络和它的架构，以及如何将额外信息融入其中。

2
00:00:13,200 --> 00:00:18,960
我们用于扩散模型的神经网络架构是一个UNet。

3
00:00:18,960 --> 00:00:21,786
关于UNet最重要的是，

4
00:00:21,787 --> 00:00:32,960
它将图像作为输入，输出与图像大小相同的预测噪声。

5
00:00:32,960 --> 00:00:40,040
UNet已经存在很长时间了，自2015年以来，它首次被用于图像分割。

6
00:00:40,040 --> 00:00:45,520
它最初被用来将一张图片中的行人或汽车分割出来，

7
00:00:45,520 --> 00:00:48,480
因此在自动驾驶汽车研究中得到了广泛应用。

8
00:00:48,480 --> 00:00:53,880
但UNet的特殊之处在于其输入和输出大小相同。

9
00:00:53,880 --> 00:00:57,886
它首先将这个输入的信息嵌入，

10
00:00:57,887 --> 00:01:06,368
通过许多卷积层将其降采样到一个压缩了所有信息的嵌入中，

11
00:01:06,568 --> 00:01:13,880
然后用相同数量的上采样块将输出返回到任务中。

12
00:01:13,880 --> 00:01:18,520
在这个例子中，它的任务就是预测应用到这个图片上的噪音。

13
00:01:18,520 --> 00:01:21,171
如果你想深入了解，我们可以一起来看看，

14
00:01:21,172 --> 00:01:27,280
这些命名块在代码中也用相同的名称显示。

15
00:01:27,280 --> 00:01:34,760
这个预测的噪声与原始输入图像的尺寸相同，16x16x3。

16
00:01:34,760 --> 00:01:38,680
UNet的另一个优点是它可以接收额外的信息。

17
00:01:38,680 --> 00:01:44,240
所以它压缩了图像以了解发生了什么，但也可以接收更多信息。

18
00:01:44,240 --> 00:01:46,320
那么我们想要包括拿些信息呢？

19
00:01:46,320 --> 00:01:50,940
对于这些模型来说，一个非常重要的信息就是时间嵌入。

20
00:01:50,940 --> 00:01:55,656
这是一种告诉模型时间步长的嵌入，

21
00:01:55,657 --> 00:01:58,720
因此我们需要某种级别的噪音。

22
00:01:58,720 --> 00:02:02,720
对于这个时间嵌入，你需要做的就是将它嵌入到一个向量中，

23
00:02:02,720 --> 00:02:06,320
然后将其添加到这些上采样块中。

24
00:02:06,320 --> 00:02:10,280
另一个有用的信息是上下文嵌入。

25
00:02:10,280 --> 00:02:16,040
我们稍后会更深入地讨论这个，但上下文嵌入的作用就是帮助你控制模型生成的内容。

26
00:02:16,040 --> 00:02:22,680
例如，一个文本描述，你想让它生成的是Bob，或者某种因子，比如需要是某种颜色。

27
00:02:22,680 --> 00:02:24,880
稍后我们会再讨论这个问题。

28
00:02:24,880 --> 00:02:27,440
对于这个上下文嵌入，你只需要将它乘进去就可以了。

29
00:02:27,440 --> 00:02:28,640
很好！

30
00:02:28,640 --> 00:02:30,560
那么这在代码中是什么样子的呢？

31
00:02:30,560 --> 00:02:32,560
这里你可以看到一个上下文嵌入。

32
00:02:32,560 --> 00:02:33,940
这只是其中之一。

33
00:02:33,940 --> 00:02:35,960
然后在这里你可以看到时间嵌入。

34
00:02:35,960 --> 00:02:39,431
在上采样模块中，你需要做的就是像图示中那样，

35
00:02:39,443 --> 00:02:45,120
把上下文嵌入乘以上采样块，然后加上时间嵌入。

36
00:02:45,120 --> 00:02:46,120
很好！

37
00:02:46,120 --> 00:02:49,960
那么现在，在 Notebook 的模型前向传递中，这就是运行模型，

38
00:02:49,960 --> 00:02:56,960
你可以看到一些这样的下采样块，然后也有这些上采样块。

39
00:02:56,960 --> 00:02:59,360
再次强调，这里是你的上下文和时间嵌入。

40
00:02:59,360 --> 00:03:02,560
我们在这里为每一个上采样块都设置了两个。

41
00:03:02,560 --> 00:03:13,120
这些上采样和下采样块是如何定义的，是在UNet的初始化部分定义的。

42
00:03:13,120 --> 00:03:16,000
所以对于下采样，这就是一个UNet下采样的样子。

43
00:03:16,000 --> 00:03:20,960
如果你想详细了解的话我们实际上在我们的辅助函数中也有这个。

44
00:03:20,960 --> 00:03:23,540
但它们就是卷积块。

45
00:03:23,540 --> 00:03:26,800
在下一个视频中，你将学会如何训练这个神经网络。
