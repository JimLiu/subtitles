1
00:00:05,000 --> 00:00:12,920
在这个视频中，我们将学习如何通过将多个提示（Prompt）链接在一起，将复杂任务分解为一系列更简单的子任务。

3
00:00:12,920 --> 00:00:16,680
你可能会想，为什么要将任务分解为多个提示，而不是

4
00:00:16,680 --> 00:00:21,520
通过一个提示和一系列思维推理来实现呢？就像我们在上一个视频中学到的那样。

5
00:00:21,520 --> 00:00:25,440
我们已经证明，语言模型非常擅长遵循复杂的指令，

6
00:00:25,440 --> 00:00:28,620
尤其是像GPT-4这样的更先进的模型。

7
00:00:28,620 --> 00:00:35,040
那么让我用两个类比来解释为什么我们要比较思维链推理和多个提示链。

8
00:00:35,040 --> 00:00:42,200
第一个类比是一次性做好一桌饭菜与分阶段做好一桌饭菜之间的区别。

9
00:00:42,200 --> 00:00:46,560
使用一个长而复杂的指令就像一次性做一桌丰盛的饭菜，

10
00:00:46,560 --> 00:00:52,040
你必须同时使用多种食材、利用高超的烹饪技巧和掌握好火候。

11
00:00:52,040 --> 00:00:57,720
同时使用所有食材，并要确保每个菜都煮得火候刚好，这是一件非常有挑战的事。

12
00:00:57,720 --> 00:01:01,420
另一方面，链式提示（Chaining prompts）就像分阶段做一桌饭菜，你可以集中注意力

13
00:01:01,420 --> 00:01:06,820
一次处理一个菜，确保每个菜在做下一个菜之前都煮好了。

14
00:01:06,820 --> 00:01:12,620
这种方法将任务的复杂性分解，使其更易于管理，降低出错的可能性。

15
00:01:12,620 --> 00:01:17,780
当然，要是做一顿非常简单的饭菜，这种方法可能是不必要的，过于复杂。

16
00:01:17,780 --> 00:01:21,360
对于这件事，对于有些程序经验的同学来说，一个更好的类比是

17
00:01:21,360 --> 00:01:25,780
意大利面条式代码，所有代码都在一个长文件中，整个程序只有一个模块。

18
00:01:25,780 --> 00:01:30,160
之所以意大利面条式代码难以阅读并且难以调试，主要原因是其模糊性和复杂的

19
00:01:30,160 --> 00:01:32,740
逻辑部分之间的依赖关系。

20
00:01:32,740 --> 00:01:37,600
对于提交给语言模型的复杂单步任务，也是类似的。

21
00:01:37,600 --> 00:01:41,540
链式提示这种策略很强大，你设计一个工作流，

22
00:01:41,540 --> 00:01:46,660
把各种中间状态保存下来，然后根据当前的状态决定后续操作。

23
00:01:46,660 --> 00:01:52,420
举一个例子，当客户查询后，你根据查询的内容对它进行分类，

24
00:01:52,420 --> 00:01:58,020
那么当前的状态将是分类，从分类结果可以得知它是一个账户问题或者是一个产品问题。

25
00:01:58,020 --> 00:02:01,980
然后根据这个状态的分类结果，你可以采取不同的行动。

26
00:02:01,980 --> 00:02:06,380
每个子任务很单一，只需要包含执行子任务所需的指令，这使得

27
00:02:06,380 --> 00:02:10,500
系统更容易管理，确保模型具有执行任务所需的所有信息

28
00:02:10,500 --> 00:02:15,560
并减少错误的可能性，正如我前面提到的那样。

29
00:02:15,560 --> 00:02:20,060
这种方法还可以降低成本，因为提示（Prompt）越长，消耗的Token就越多，成本越高，

30
00:02:20,060 --> 00:02:24,940
而在某些情况下，在Prompt中列出所有步骤可能是不必要的。

31
00:02:24,940 --> 00:02:28,980
这种方法的另一个好处是，它也更容易测试哪些步骤可能

32
00:02:28,980 --> 00:02:33,380
更容易出错，或者在特定步骤中让人工介入。

33
00:02:33,380 --> 00:02:37,900
所以总结一下，因为这是一个很长的解释，与其在一个提示中

34
00:02:37,900 --> 00:02:42,420
用几十个要点或几段文字描述一个复杂的工作流程，就像在之前的视频中那样，

35
00:02:42,420 --> 00:02:48,480
不如在外部跟踪状态，然后根据需要注入相应的指令。

36
00:02:48,480 --> 00:02:50,220
那么，是什么使问题变得复杂？

37
00:02:50,220 --> 00:02:54,420
我认为一般来说，如果有很多不同的指令，并且

38
00:02:54,420 --> 00:02:58,620
潜在地所有这些指令都可能适用于任何给定的情况，那么问题就会

39
00:02:58,620 --> 00:03:01,500
变得复杂，因为这些情况可能会让模型难以推理该做什么。

40
00:03:01,500 --> 00:03:04,760
随着您与这些模型的构建和互动越来越多，您将能

41
00:03:04,760 --> 00:03:07,540
更直观的了解，何时使用这种链式提示的策略还是之前一条复杂提示的策略。

42
00:03:07,540 --> 00:03:12,140
还有一点我没提到的额外好处：它还允许

43
00:03:12,140 --> 00:03:16,380
模型在必要时在工作流程的某些点调用外部工具。

44
00:03:16,380 --> 00:03:23,220
例如，它可以在产品目录中查找某些信息，或者调用API，或者搜索知识库。

45
00:03:23,220 --> 00:03:26,140
这是单个提示无法实现的。

46
00:03:26,140 --> 00:03:29,200
接下来让我们通过一个例子来深入了解。

47
00:03:29,200 --> 00:03:32,780
我们将使用与上一个视频相同的例子，我们想回答

48
00:03:32,780 --> 00:03:35,460
关于特定产品的客户问题。

49
00:03:35,460 --> 00:03:42,560
但这次我们将使用更多的产品，并将步骤分解为多个不同的提示。

50
00:03:42,560 --> 00:03:47,900
我们将使用与之前视频相同的分隔符。

51
00:03:47,900 --> 00:03:53,180
让我们阅读一下系统消息。

52
00:03:53,180 --> 00:03:55,600
您将要处理一段客户服务查询。

53
00:03:55,600 --> 00:04:00,780
客户服务查询内容会以四个井号字符分隔。

54
00:04:00,780 --> 00:04:04,900
输出一个Python对象列表，其中每个对象具有以下格式：

55
00:04:04,900 --> 00:04:09,260
类别，这是以下预定义字段之一。

56
00:04:09,260 --> 00:04:11,080
或产品。

57
00:04:11,080 --> 00:04:14,580
这是一个产品列表，必须在下面的允许产品中找到。

58
00:04:14,580 --> 00:04:19,780
类别和产品必须在客户服务查询中找到。

59
00:04:19,780 --> 00:04:24,740
如果提到了产品，必须将其与下面允许产品列表中的正确类别关联。

60
00:04:24,740 --> 00:04:27,500
如果没有找到产品或类别，请输出一个空列表。

61
00:04:27,500 --> 00:04:30,700
现在我们有了允许的产品列表。

62
00:04:30,700 --> 00:04:36,060
所以我们有类别，然后是这些类别中的产品。

63
00:04:36,060 --> 00:04:43,780
我们最后的指示是仅输出对象列表，不包含其他内容。

64
00:04:43,780 --> 00:04:46,180
接下来我们有用户消息。

65
00:04:46,180 --> 00:04:53,460
所以这个消息是：“告诉我关于smartx pro手机和fotosnap相机，那个单反的。

66
00:04:53,460 --> 00:04:55,420
还告诉我你们有哪些电视。”

67
00:04:55,420 --> 00:04:59,020
用户询问了两个特定的产品（手机和相机）。

68
00:04:59,020 --> 00:05:03,860
还有电视这个类别。

69
00:05:03,860 --> 00:05:07,420
这两个产品都在允许的产品列表中。

70
00:05:07,420 --> 00:05:11,620
然后还有一个电视部分。

71
00:05:11,620 --> 00:05:18,420
将系统消息和用户消息格式化为消息数组。

72
00:05:18,420 --> 00:05:25,060
然后我们从模型中得到结果。

73
00:05:25,060 --> 00:05:30,980
如你所见，对于我们的输出，我们有一个对象列表。

74
00:05:30,980 --> 00:05:35,180
每个对象都有类别和产品。

75
00:05:35,180 --> 00:05:42,140
我们有SmartX Pro手机和FotoSnap DSLR相机。

76
00:05:42,140 --> 00:05:48,060
在最后一个对象中，我们实际上只有一个类别，因为我们没有提到任何特定的电视。

77
00:05:48,060 --> 00:05:58,660
输出这种结构化响应的好处是我们可以将其读入并解析为一个Python列表，这非常好。

78
00:05:58,660 --> 00:06:01,660
那么让我们再试一个例子。

79
00:06:01,660 --> 00:06:07,980
我们的第二个用户消息是：“我的路由器不能用。”

80
00:06:07,980 --> 00:06:12,020
如果你注意到我们的列表中，实际上没有任何路由器。

81
00:06:12,020 --> 00:06:20,580
让我们组织好消息内容，并从模型获得结果。

82
00:06:20,580 --> 00:06:25,460
如您所见，在这种情况下，输出是一个空列表。

83
00:06:25,460 --> 00:06:28,841
现在我们有了这个步骤来识别类别和产品，

84
00:06:28,842 --> 00:06:34,100
如果找到了任何产品和类别，我们希望将有关这些请求产品的一些信息

85
00:06:34,100 --> 00:06:38,420
和类别，都加入到提示中，以便我们更好地回答客户问题。

86
00:06:38,420 --> 00:06:46,060
在我们的工作流程中，现在在这个提示运行之后的状态，要么是列出了产品，要么是没有列出产品。

87
00:06:46,060 --> 00:06:51,100
如果是没有列出产品的情况，我们不会尝试查找任何东西，因为没有东西可供查找。

88
00:06:51,100 --> 00:06:55,757
如果我要把这个功能真正地构建成一个系统，我可能会使用类别名称，

89
00:06:55,758 --> 00:07:05,260
也许像计算机和笔记本电脑之类的东西，以避免空格和特殊字符带来的奇怪问题。

90
00:07:05,260 --> 00:07:07,500
但现在这应该可以工作。

91
00:07:07,500 --> 00:07:11,160
现在我们想查找一些关于用户提到的产品的信息。

92
00:07:11,160 --> 00:07:15,100
关于这种手机、这种相机和电视机。

93
00:07:15,100 --> 00:07:19,020
我们需要有个产品目录来查找这些信息。

94
00:07:19,020 --> 00:07:24,620
这里有我刚刚粘贴的产品信息。

95
00:07:24,620 --> 00:07:32,660
如您所见，我们的商店有大量的产品。

96
00:07:32,660 --> 00:07:38,100
而所有这些产品都是假的，实际上是由GPT-4生成的。

97
00:07:38,100 --> 00:07:41,020
对于每个产品，我们有几个不同的字段，

98
00:07:41,020 --> 00:07:46,960
有：名称、类别、品牌、保修等等。

99
00:07:46,960 --> 00:07:55,700
"products"只是一个从产品名称到包含产品信息的对象的字典。

100
00:07:55,700 --> 00:07:57,780
注意每个产品都有一个类别。

101
00:07:57,780 --> 00:08:01,580
请记住，我们要查找用户询问的产品的信息。

102
00:08:01,580 --> 00:08:08,820
我们需要定义一些辅助函数，以便根据产品名称查找产品信息。

103
00:08:08,820 --> 00:08:14,700
让我们创建一个函数，可以用来根据名称获取产品。

104
00:08:14,700 --> 00:08:17,100
我们输入名称。

105
00:08:17,100 --> 00:08:26,560
我们将返回产品字典，我们将从字典中获取key是name的值。

106
00:08:26,560 --> 00:08:29,440
我们的备选方案暂时没有。

107
00:08:29,440 --> 00:08:34,340
我们还想定义另一个辅助函数，以获取某个类别的所有产品。

108
00:08:34,340 --> 00:08:37,606
例如，当用户向我们询问电视时，

109
00:08:37,607 --> 00:08:42,560
我们希望加载所有的不同的电视的所有信息。

110
00:08:42,560 --> 00:08:51,220
通过输入类别名称来获取类别下的产品。

111
00:08:51,220 --> 00:08:57,560
为此，我们要遍历产品字典中的所有产品，

112
00:08:57,560 --> 00:09:02,500
并检查所有离别和要查询类别相同的产品。

113
00:09:02,500 --> 00:09:04,840
如果是这样，我们想要返回这个。

114
00:09:04,840 --> 00:09:07,920
我们将按照以下方式进行。

115
00:09:07,920 --> 00:09:12,520
首先，我们要遍历每个产品，我们必须获取值，因为我们需要

116
00:09:12,520 --> 00:09:18,300
实际访问值中的类别。

117
00:09:18,300 --> 00:09:37,060
然后，如果产品类别等于我们的输入类别，我们将返回此产品。

118
00:09:37,060 --> 00:09:42,220
让我们为这些辅助函数的每一个做一个例子。

119
00:09:42,220 --> 00:09:47,300
首先，我们有一个名为TechPro Ultrabook的产品。

120
00:09:47,300 --> 00:09:51,860
让我们通过名称获取产品信息。

121
00:09:51,860 --> 00:09:57,260
在这里，您可以看到我们刚刚获取了所有产品信息。

122
00:09:57,260 --> 00:10:00,660
让我们举一个例子，获取一个类别的所有产品。

123
00:10:00,660 --> 00:10:07,020
那么让我们获取计算机和笔记本电脑类别中的所有产品。

124
00:10:07,020 --> 00:10:17,020
在这里你可以看到我们获取了这个类别下的所有产品。

125
00:10:17,020 --> 00:10:20,980
那么让我们继续我们的例子。

126
00:10:20,980 --> 00:10:24,420
为了记住我们在哪里，让我们打印用户消息。

127
00:10:24,420 --> 00:10:30,540
用户消息是："告诉我关于SmartX Pro手机、相机和电视的信息。"

128
00:10:30,540 --> 00:10:36,260
这就是第一步模型的初始输出。

129
00:10:36,260 --> 00:10:41,220
还需要做的是阅读模型的这个输出，它是一个字符串。

130
00:10:41,220 --> 00:10:49,300
我们需要将其解析成一个列表，以便输入到刚刚编写的辅助函数中。

131
00:10:49,300 --> 00:10:54,940
让我们编写一个辅助函数来完成这个任务。

132
00:10:54,940 --> 00:10:58,420
我们将使用Python的JSON模块。

133
00:10:58,420 --> 00:11:09,860
我们将编写一个名为read_string_to_list的函数，这是函数名很直观，读取字符串到列表。

134
00:11:09,860 --> 00:11:16,020
首先，我们将检查输入字符串是否为空。

135
00:11:16,020 --> 00:11:22,300
如果前面的步骤中出现了问题，返回空。

136
00:11:22,300 --> 00:11:29,520
现在我们将加上try except块来确保捕获任何错误。

137
00:11:29,520 --> 00:11:37,020
将输入字符串中的任何单引号替换为双引号，以便

138
00:11:37,020 --> 00:11:39,180
确保我们可以解析JSON。

139
00:11:39,180 --> 00:11:47,380
然后使用JSON loads函数将输入的字符串解析成数组或列表。

140
00:11:47,380 --> 00:11:49,580
然后将结果返回。

141
00:11:49,580 --> 00:11:55,720
如果出现解码错误，就打印错误，返回none。

142
00:11:55,720 --> 00:11:58,540
让我们用之前的例子测试一下。

143
00:11:58,540 --> 00:12:07,000
我们将使用read_string_to_list辅助函数获取类别和产品列表

144
00:12:07,000 --> 00:12:10,500
并将模型的返回结果传给它。

145
00:12:10,500 --> 00:12:13,200
然后打印解析出来的列表。

146
00:12:13,200 --> 00:12:15,340
它应该看起来是一样的。

147
00:12:15,340 --> 00:12:17,380
让我先运行这个。

148
00:12:17,380 --> 00:12:25,860
正如你所看到的，两者的内容是一样的，只是现在这个变量的类型是列表而不是字符串。

149
00:12:25,860 --> 00:12:29,760
这么做的目的是用一个列表来保存这些产品信息

150
00:12:29,760 --> 00:12:34,020
接下来将其添加到下一条指令给模型，生成

151
00:12:34,020 --> 00:12:36,740
回答用户问题的指令。

152
00:12:36,740 --> 00:12:41,620
为了做到这一点，我们需要将产品信息格式化成字符串，

153
00:12:41,620 --> 00:12:42,940
然后将其添加到提示中。

154
00:12:42,940 --> 00:12:47,460
让我们创建另一个辅助函数来完成这个任务。

155
00:12:47,460 --> 00:12:50,460
我们将它命名为generate_output_string。

156
00:12:50,460 --> 00:12:54,180
它将接收我们刚刚生成的数据列表。

157
00:12:54,180 --> 00:12:56,620
就像这样。

158
00:12:56,620 --> 00:13:00,740
然后我将复制一些代码，然后来讲解它的功能。

159
00:13:00,740 --> 00:13:06,260
现在我将粘贴一些代码，给你们看一个例子，然后我们将讨论这个函数的作用。

160
00:13:06,260 --> 00:13:12,220
我们将从第一个用户消息中获取产品信息。

161
00:13:12,220 --> 00:13:16,823
接下来我们将在类别和产品列表上使用这个辅助函数generate_output_string，

162
00:13:16,824 --> 00:13:23,600
如果你还记得的话，就是这个。

163
00:13:23,600 --> 00:13:31,860
在这里，我们有了用户消息中提到的所有产品的产品信息。

164
00:13:31,860 --> 00:13:36,020
我们有用户提到的手机，有用户提到的相机，还有

165
00:13:36,020 --> 00:13:42,220
然后我们有所有电视的产品信息。

166
00:13:42,220 --> 00:13:49,060
这些信息将有助于模型回答用户的初始问题。

167
00:13:49,061 --> 00:13:51,347
如果您对这个功能的工作原理感兴趣，

168
00:13:51,348 --> 00:13:57,260
我会简要概述一下，但您可以随时暂停视频并仔细阅读。

169
00:13:57,260 --> 00:14:03,660
它基本上只是遍历这个列表中的所有对象，首先检查是否有产品。

170
00:14:03,660 --> 00:14:09,260
如果有，它会获取每个产品的信息，然后检查是否有类别，

171
00:14:09,260 --> 00:14:10,460
如果没有找到任何产品。

172
00:14:10,460 --> 00:14:14,640
举例来说，这就是类别的对象。

173
00:14:14,640 --> 00:14:22,520
然后它获取该类别中所有产品的产品信息，并将它们添加到此字符串中。

174
00:14:22,520 --> 00:14:24,760
然后就是它返回的内容。

175
00:14:24,760 --> 00:14:29,960
目前为止，我们已经找到了相关的产品信息来回答用户的问题。

176
00:14:29,960 --> 00:14:32,920
现在是时候让模型来正式回复这个问题了。

177
00:14:32,920 --> 00:14:36,440
那么让我们来看看系统消息。

178
00:14:36,440 --> 00:14:38,600
这是指示：

179
00:14:38,600 --> 00:14:41,720
“你是一家大型电子商店的客户服务助手。

180
00:14:41,720 --> 00:14:47,000
以友好、有帮助的语气回答，我们可以说，非常简洁的答案。

181
00:14:47,000 --> 00:14:49,200
确保向用户提出相关的后续问题。”

182
00:14:49,200 --> 00:14:52,820
我们希望这对用户来说是一种互动体验。

183
00:14:52,820 --> 00:14:56,640
那么，作为提醒，这是我们最初的用户消息。

184
00:14:56,640 --> 00:15:00,200
我再加一次。

185
00:15:00,200 --> 00:15:04,560
现在有了消息数组。

186
00:15:04,560 --> 00:15:06,160
就是输入到模型的内容。

187
00:15:06,160 --> 00:15:07,200
让我们来看看这个。

188
00:15:07,200 --> 00:15:11,920
第一条消息，像以前一样是系统消息。

189
00:15:11,920 --> 00:15:14,800
我们有用户消息。

190
00:15:14,800 --> 00:15:20,280
然后还有这个额外的助手消息。

191
00:15:20,280 --> 00:15:24,680
这里包含了刚刚找到的所有产品信息的消息。

192
00:15:24,680 --> 00:15:32,840
这里是相关的产品信息，另起一行，然后是刚刚找到的这些产品信息。

193
00:15:32,840 --> 00:15:38,360
现在模型具有回答用户问题所需的相关上下文。

194
00:15:38,360 --> 00:15:45,040
那么让我们看看最后返回的结果，并打印出来。

195
00:15:45,040 --> 00:15:58,160
我们希望模型能够利用产品信息中的相关信息来帮助用户。

196
00:15:58,160 --> 00:16:04,919
首先，它告诉用户关于Smart X Pro手机的信息，告诉用户关于FotoSnap相机的信息，

197
00:16:05,953 --> 00:16:13,920
然后谈论我们现有的不同电视，最后提出后续问题。

198
00:16:13,920 --> 00:16:17,395
如您所见，通过将其分解为一系列步骤，

199
00:16:17,396 --> 00:16:20,670
我们能够加载与用户查询相关的信息

200
00:16:20,671 --> 00:16:25,120
为模型提供回答问题所需的相关上下文。

201
00:16:25,120 --> 00:16:29,320
你可能会想，为什么我们只选择一部分产品的描述信息加载到提示中，

202
00:16:29,320 --> 00:16:33,600
而不是包含所有产品的描述信息，让模型可以从中获取它所需的信息？

203
00:16:33,600 --> 00:16:38,519
我的意思是，为什么我们不把所有产品的信息都包含在提示中，

204
00:16:39,000 --> 00:16:45,240
这样我们就不用费心去做那些中间步骤，不用去查找产品信息了？

205
00:16:45,240 --> 00:16:47,360
这其中有几个原因。

206
00:16:47,360 --> 00:16:51,839
首先，包含所有产品描述可能会使模型的上下文更加混乱，

207
00:16:52,000 --> 00:16:57,000
就像一个人试图一次处理大量信息。

208
00:16:57,000 --> 00:17:01,430
我要说的是，对于像GPT-4这样更先进的模型，这一点相对不那么重要，

209
00:17:01,431 --> 00:17:04,724
尤其是当上下文结构良好，就像这个例子中一样，

210
00:17:04,725 --> 00:17:10,240
而且模型足够智能，可以忽略那些显然不相关的信息。

211
00:17:10,240 --> 00:17:12,080
接下来的原因更有说服力。

212
00:17:12,080 --> 00:17:15,825
第二个原因是，语言模型有上下文限制，

213
00:17:15,826 --> 00:17:20,120
即允许输入和输出的固定数量的标记。

214
00:17:20,120 --> 00:17:24,000
如果你有大量的产品，想象一下你有一个庞大的产品目录，

215
00:17:24,000 --> 00:17:28,000
你甚至无法将所有描述放入上下文窗口中。

216
00:17:28,000 --> 00:17:32,320
最后一个原因是包含所有产品描述可能会很昂贵

217
00:17:32,320 --> 00:17:35,060
因为在使用语言模型时，您需要按消耗的Token付费。

218
00:17:35,060 --> 00:17:40,880
因此，通过有选择地加载部分产品信息，可以降低调用的成本。

219
00:17:40,880 --> 00:17:44,760
总的来说，确定何时将信息动态加载到模型的上下文中

220
00:17:44,760 --> 00:17:50,880
并允许模型决定何时需要更多信息，是增强这些模型能力的最佳方法之一。

221
00:17:50,880 --> 00:17:54,640
再次强调，您应该将语言模型视为一个

222
00:17:54,640 --> 00:17:59,320
需要必要的上下文来推理出有用结论和执行有用任务的代理。

223
00:17:59,320 --> 00:18:03,501
所以在这个例子中，我们必须给模型提供产品信息，

224
00:18:03,502 --> 00:18:09,520
然后它能够根据该产品信息进行推理，为用户创建有用的答案。

225
00:18:09,520 --> 00:18:15,446
在这个例子中，我们只添加了一个调用特定功能或功能的方法，根据产品名称获取产品描述，

226
00:18:15,446 --> 00:18:18,520
或者根据类别名称获取类别产品。

227
00:18:18,520 --> 00:18:23,040
但是，这些模型实际上擅长决定何时使用各种不同的工具，

228
00:18:23,040 --> 00:18:25,400
并且可以在有指示的情况下正确使用它们。

229
00:18:25,400 --> 00:18:28,160
这就是ChatGPT插件背后的原理。

230
00:18:28,160 --> 00:18:31,233
我们告诉模型它可以使用哪些工具以及每个工具的功能，

231
00:18:31,234 --> 00:18:37,360
当它需要从特定来源获取信息或采取其他适当行动时，它会选择使用这些工具。

232
00:18:37,360 --> 00:18:42,640
在我们的例子中，我们只能通过精确的产品和类别名称来查找信息，

233
00:18:42,640 --> 00:18:46,000
但还有更先进的信息检索技术。

234
00:18:46,000 --> 00:18:50,160
使用文本嵌入（Text Embedding）是检索信息最有效的方法之一。

235
00:18:50,160 --> 00:18:56,880
嵌入（Embedding）可以用于在大型语料库上实现高效的知识检索，以找到与给定查询相关的信息。

236
00:18:56,880 --> 00:19:02,160
使用文本嵌入的一个优势是它支持模糊或语义搜索，

237
00:19:02,160 --> 00:19:06,280
这样你可以使用自然语言而不是关键词找到相关信息。

238
00:19:06,280 --> 00:19:09,509
所以在我们的例子中，不一定需要产品的确切名称，

239
00:19:09,510 --> 00:19:16,280
但我们可以使用更通用的查询进行搜索，例如“手机”。

240
00:19:16,280 --> 00:19:21,960
我们计划不久后开一个关于如何将嵌入（Embeddings）应用于各种应用的全面课程，敬请期待！

241
00:19:21,960 --> 00:19:25,282
好了，让我们继续观看下一个视频，接下来我们将讨论：

242
00:19:25,283 --> 00:19:28,800
“如何评估语言模型的输出结果。”
