在本节中，我们将关注输入评估相关的任务，这对于确保系统的质量和安全性非常重要。
对于需要大量独立指令集来处理不同情况的任务，
首先对查询类型进行分类，然后根据该分类确定要使用哪些指令可能是有益的。
这可以通过定义固定类别并硬编码与处理给定类别任务相关的指令来实现。
例如，在构建客户服务助手时，首先对查询类型进行分类可能很重要，
然后根据该分类确定要使用哪些指令。
因此，例如，如果用户要求关闭他们的帐户，您可能会给出不同的二级指令，而如果用户询问特定产品，则可能会给出不同的二级指令。
所以在第一个情况下，您可能会添加有关如何关闭帐户的其他指令，
然后在第二个情况下，您可能会添加其他产品信息。
但让我们看一个例子，我认为这会让它更清楚。
所以这里有我们的系统消息，这是整个系统的指令，我们正在使用这个分隔符。
分隔符只是一种分隔指令或输出的不同部分的方法，
它有助于模型确定不同的部分。
所以在这个例子中，我们将使用井号作为分隔符，这是一个很好的分隔符，因为它实际上是一个标记（Token）。
所以这是我们的系统消息。
我们要求模型：“您将提供客户服务查询，
客户服务查询将用这些井号字符分隔。”
将每个查询分类为一个主要类别和一个次要类别，
然后以JSON格式提供输出，键为primary和secondary。
所以我们在这里列出了我们的主要类别，如计费、技术支持、账户管理或一般查询。
然后在下面，我们有次要类别的列表，取消订阅、升级等。
那么现在让我们举一个用户消息的例子。
所以我们的第一条用户消息，我们将使用以下内容。
所以用户消息是：“我希望你删除我的个人资料和所有用户数据”。
然后我们将用这些井号分隔系统消息和用户消息，将其格式化为消息列表。
让我们看一下，看看我们认为这可能是什么。
所以我希望你删除我的个人资料。
这看起来有点像账户管理，也许是关闭账户。
让我们看看模型的想法。
很好，所以模型的分类结果是“账户管理”作为主要类别，然后“关闭账户”作为次要类别。
关于要求一个结构化输出，比如 JSON 的好处是，你可以轻松地将其读入某种对象。
所以，例如，在 Python 中可以使用Dictionary，或者在其他语言中使用其他东西。
然后你可以将其作为后续步骤的输入。
我会给你展示另一个例子，但也可以随时暂停视频，尝试你自己的用户问题，看看模型如何对它们进行分类。
这是另一个用户留言。告诉我更多关于你们的平板电视的信息。
我们只需从模型中获得相同的消息列表响应，然后打印出来。
这里我们有第二个分类，看起来是正确的。
所以，总的来说，根据客户询问的分类，我们现在可以提供一组更具体的指示来处理下一步。
在这种情况下，我们可能会添加关于电视的额外信息，而在这种情况下，我们可能想要提供一个关闭帐户的链接之类的东西。
我们将在后面的视频中了解更多关于处理输入的不同方法。
在下一个视频中，我们将探讨更多评估输入的方法，特别是确保用户以负责任的方式使用系统的方法。