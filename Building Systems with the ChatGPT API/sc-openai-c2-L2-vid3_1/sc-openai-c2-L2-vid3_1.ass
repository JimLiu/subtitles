[Script Info]

Title: sc-openai-c2-L2-vid3_1
ScriptType: v4.00+
WrapStyle: 0
Collisions: Reverse
PlayResX: 384
PlayResY: 288
Timer: 100.0000
ScaledBorderAndShadow: no
Last Style Storage: Default
Video Aspect Ratio: 0
Video Zoom: 6
Video Position: 0

[V4+ Styles]
Format: Name,Fontname,Fontsize,PrimaryColour,SecondaryColour,OutlineColour,BackColour,Bold,Italic,Underline,StrikeOut,ScaleX,ScaleY,Spacing,Angle,BorderStyle,Outline,Shadow,Alignment,MarginL,MarginR,MarginV,Encoding
Style: Default,LXGW WenKai,16,&H0080FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,1,1,6,1
Style: Secondary,Helvetica,10,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,1,1,6,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 9,0:00:05.0,0:00:10.0,Secondary,,0,0,0,,{\an7\fs10\pos(9,11)\fad(300,1000)}{\1c&H00FFFFFF&\2c&H0000FF&}翻译：{\1c&H80FFFF&\2c&H0000FF&}宝玉 + GPT-4
Dialogue: 1,0:00:05.0,0:00:12.0,Secondary,,0,0,0,,In this section, we'll focus on tasks to evaluate inputs, which can be important for ensuring the quality and safety of the system.
Dialogue: 1,0:00:12.0,0:00:16.0,Secondary,,0,0,0,,For tasks in which lots of independent sets of instructions are needed to handle different cases,
Dialogue: 1,0:00:16.0,0:00:23.0,Secondary,,0,0,0,,it can be beneficial to first classify the type of query and then use that classification to determine which instructions to use.
Dialogue: 1,0:00:23.0,0:00:30.0,Secondary,,0,0,0,,This can be achieved by defining fixed categories and hard-coding instructions that are relevant for handling tasks in a given category.
Dialogue: 1,0:00:30.0,0:00:36.0,Secondary,,0,0,0,,For instance, when building a customer service assistant, it might be important to first classify the type of query
Dialogue: 1,0:00:36.0,0:00:39.0,Secondary,,0,0,0,,and then determine which instructions to use based on that classification.
Dialogue: 1,0:00:39.0,0:00:48.0,Secondary,,0,0,0,,So, for example, you might give different secondary instructions if a user asks to close their account versus if a user asks about a specific product.
Dialogue: 1,0:00:48.0,0:00:52.0,Secondary,,0,0,0,,So in the first case, you'd maybe add additional instructions about how to close the account,
Dialogue: 1,0:00:52.0,0:00:55.0,Secondary,,0,0,0,,and then in the second case, you might add additional product information.
Dialogue: 1,0:00:55.0,0:00:58.0,Secondary,,0,0,0,,But let's see an example, and I think it will make it more clear.
Dialogue: 1,0:00:58.0,0:01:06.0,Secondary,,0,0,0,,So here we have our system message, which is the instruction for the overall system, and we're using this delimiter.
Dialogue: 1,0:01:06.0,0:01:11.0,Secondary,,0,0,0,,And a delimiter is just a way to separate different parts of an instruction or output,
Dialogue: 1,0:01:11.0,0:01:15.0,Secondary,,0,0,0,,and it helps the model kind of determine the different sections.
Dialogue: 1,0:01:15.0,0:01:25.0,Secondary,,0,0,0,,And so for this example, we'll use the delimiter for hashtags, and this is a nice delimiter because it's actually represented as one token.
Dialogue: 1,0:01:25.0,0:01:27.0,Secondary,,0,0,0,,And so here's our system message.
Dialogue: 1,0:01:27.0,0:01:31.0,Secondary,,0,0,0,,We're asking the model, so you will be provided with customer service queries.
Dialogue: 1,0:01:31.0,0:01:36.0,Secondary,,0,0,0,,The customer service query will be delimited with these hashtag characters.
Dialogue: 1,0:01:36.0,0:01:40.0,Secondary,,0,0,0,,Classify each query into a primary category and a secondary category,
Dialogue: 1,0:01:40.0,0:01:44.0,Secondary,,0,0,0,,and then provide the output in a JSON format with the keys primary and secondary.
Dialogue: 1,0:01:44.0,0:01:51.0,Secondary,,0,0,0,,And so we have our primary categories listed here, so billing, technical support, account management, or general inquiry.
Dialogue: 1,0:01:51.0,0:01:59.0,Secondary,,0,0,0,,And then below, we have the list of secondary categories, unsubscrible upgrade, et cetera.
Dialogue: 1,0:01:59.0,0:02:04.0,Secondary,,0,0,0,,And so now let's do an example of a user message.
Dialogue: 1,0:02:04.0,0:02:12.0,Secondary,,0,0,0,,So for our first user message, we'll use the following.
Dialogue: 1,0:02:12.0,0:02:20.0,Secondary,,0,0,0,,So the user message is: "I want you to delete my profile and all of my user data".
Dialogue: 1,0:02:20.0,0:02:30.0,Secondary,,0,0,0,,And then we'll just format this into a messages list with the system message and the user message delimited with these hashtags.
Dialogue: 1,0:02:30.0,0:02:33.0,Secondary,,0,0,0,,And let's just take a look and see what we think this might be.
Dialogue: 1,0:02:33.0,0:02:36.0,Secondary,,0,0,0,,So I want you to delete my profile.
Dialogue: 1,0:02:36.0,0:02:41.0,Secondary,,0,0,0,,This kind of looks like account management, maybe close account.
Dialogue: 1,0:02:41.0,0:02:48.0,Secondary,,0,0,0,,Let's see what the model thinks.
Dialogue: 1,0:02:48.0,0:02:55.0,Secondary,,0,0,0,,Great, so the classification from the model is account management as the primary category and then close account as a secondary.
Dialogue: 1,0:02:55.0,0:03:03.0,Secondary,,0,0,0,,And the nice thing about asking for a structured output like a JSON is that you can then read this easily into some kind of object.
Dialogue: 1,0:03:03.0,0:03:08.0,Secondary,,0,0,0,,So a dictionary, for example, in Python or something else if you're using a different language.
Dialogue: 1,0:03:08.0,0:03:13.0,Secondary,,0,0,0,,And then you can use this as the input to a subsequent step.
Dialogue: 1,0:03:13.0,0:03:23.0,Secondary,,0,0,0,,I'll show you another example, but also feel free to pause the video now and just try your own user questions and see how the model categorizes them.
Dialogue: 1,0:03:23.0,0:03:27.0,Secondary,,0,0,0,,So here's another user message. Tell me more about your flat screen TVs.
Dialogue: 1,0:03:27.0,0:03:33.0,Secondary,,0,0,0,,And we just have the same messages list response from the model and then we'll just print it.
Dialogue: 1,0:03:33.0,0:03:40.0,Secondary,,0,0,0,,And here we have our second categorization, which seems correct.
Dialogue: 1,0:03:40.0,0:03:49.0,Secondary,,0,0,0,,And so in general, based on the categorization of the customer inquiry, we can now provide a set of more specific instructions to handle the next steps.
Dialogue: 1,0:03:49.0,0:03:58.0,Secondary,,0,0,0,,In this case, we might add kind of additional information about the TVs versus in this case, we might want to give a link to closing the account or something like that.
Dialogue: 1,0:03:58.0,0:04:03.0,Secondary,,0,0,0,,We'll learn more about different ways to process inputs in a later video.
Dialogue: 1,0:04:03.0,0:04:12.0,Secondary,,0,0,0,,And in the next video, we'll look at more ways to evaluate inputs and specifically ways to ensure that your users are using the system in a responsible way.
Dialogue: 1,0:00:05.0,0:00:12.0,Default,,0,0,0,,在本节中，我们将关注输入评估\N相关的任务，这对于确保系统的\N质量和安全性非常重要。
Dialogue: 1,0:00:12.0,0:00:16.0,Default,,0,0,0,,对于需要大量独立指令集来\N处理不同情况的任务，
Dialogue: 1,0:00:16.0,0:00:23.0,Default,,0,0,0,,首先对查询类型进行分类，然后根据该分\N类确定要使用哪些指令可能是有益的。
Dialogue: 1,0:00:23.0,0:00:30.0,Default,,0,0,0,,这可以通过定义固定类别并硬编码与处\N理给定类别任务相关的指令来实现。
Dialogue: 1,0:00:30.0,0:00:36.0,Default,,0,0,0,,例如，在构建客户服务助手时，首先对\N查询类型进行分类可能很重要，
Dialogue: 1,0:00:36.0,0:00:39.0,Default,,0,0,0,,然后根据该分类确定要使用哪些指令。
Dialogue: 1,0:00:39.0,0:00:48.0,Default,,0,0,0,,因此，例如，如果用户要求关闭他们\N的帐户，您可能会给出不同的二级指\N令，而如果用户询问特定产品，则可\N能会给出不同的二级指令。
Dialogue: 1,0:00:48.0,0:00:52.0,Default,,0,0,0,,所以在第一个情况下，您可能会添加\N有关如何关闭帐户的其他指令，
Dialogue: 1,0:00:52.0,0:00:55.0,Default,,0,0,0,,然后在第二个情况下，您可\N能会添加其他产品信息。
Dialogue: 1,0:00:55.0,0:00:58.0,Default,,0,0,0,,但让我们看一个例子，我\N认为这会让它更清楚。
Dialogue: 1,0:00:58.0,0:01:06.0,Default,,0,0,0,,所以这里有我们的系统消息，这是整个系\N统的指令，我们正在使用这个分隔符。
Dialogue: 1,0:01:06.0,0:01:11.0,Default,,0,0,0,,分隔符只是一种分隔指令或\N输出的不同部分的方法，
Dialogue: 1,0:01:11.0,0:01:15.0,Default,,0,0,0,,它有助于模型确定不同的部分。
Dialogue: 1,0:01:15.0,0:01:25.0,Default,,0,0,0,,所以在这个例子中，我们将使用井号作\N为分隔符，这是一个很好的分隔符，因\N为它实际上是一个标记（Token）。
Dialogue: 1,0:01:25.0,0:01:27.0,Default,,0,0,0,,所以这是我们的系统消息。
Dialogue: 1,0:01:27.0,0:01:31.0,Default,,0,0,0,,我们要求模型：“您将提供客户服务查询，
Dialogue: 1,0:01:31.0,0:01:36.0,Default,,0,0,0,,客户服务查询将用这些井号字符分隔。”
Dialogue: 1,0:01:36.0,0:01:40.0,Default,,0,0,0,,将每个查询分类为一个主要\N类别和一个次要类别，
Dialogue: 1,0:01:40.0,0:01:44.0,Default,,0,0,0,,然后以JSON格式提供输出，键\N为primary和secondary。
Dialogue: 1,0:01:44.0,0:01:51.0,Default,,0,0,0,,所以我们在这里列出了我们的主要类别，\N如计费、技术支持、账户管理或一般查询。
Dialogue: 1,0:01:51.0,0:01:59.0,Default,,0,0,0,,然后在下面，我们有次要类别\N的列表，取消订阅、升级等。
Dialogue: 1,0:01:59.0,0:02:04.0,Default,,0,0,0,,那么现在让我们举一个用户消息的例子。
Dialogue: 1,0:02:04.0,0:02:12.0,Default,,0,0,0,,所以我们的第一条用户消息\N，我们将使用以下内容。
Dialogue: 1,0:02:12.0,0:02:20.0,Default,,0,0,0,,所以用户消息是：“我希望你删除我\N的个人资料和所有用户数据”。
Dialogue: 1,0:02:20.0,0:02:30.0,Default,,0,0,0,,然后我们将用这些井号分隔系统消息和\N用户消息，将其格式化为消息列表。
Dialogue: 1,0:02:30.0,0:02:33.0,Default,,0,0,0,,让我们看一下，看看我们\N认为这可能是什么。
Dialogue: 1,0:02:33.0,0:02:36.0,Default,,0,0,0,,所以我希望你删除我的个人资料。
Dialogue: 1,0:02:36.0,0:02:41.0,Default,,0,0,0,,这看起来有点像账户管\N理，也许是关闭账户。
Dialogue: 1,0:02:41.0,0:02:48.0,Default,,0,0,0,,让我们看看模型的想法。
Dialogue: 1,0:02:48.0,0:02:55.0,Default,,0,0,0,,很好，所以模型的分类结果是“\N账户管理”作为主要类别，然后“\N关闭账户”作为次要类别。
Dialogue: 1,0:02:55.0,0:03:03.0,Default,,0,0,0,,关于要求一个结构化输出，比如 JSON 的\N好处是，你可以轻松地将其读入某种对象。
Dialogue: 1,0:03:03.0,0:03:08.0,Default,,0,0,0,,所以，例如，在 Python 中可以使用\NDictionary，或者在其他语言中使用其他\N东西。
Dialogue: 1,0:03:08.0,0:03:13.0,Default,,0,0,0,,然后你可以将其作为后续步骤的输入。
Dialogue: 1,0:03:13.0,0:03:23.0,Default,,0,0,0,,我会给你展示另一个例子，但也可以随\N时暂停视频，尝试你自己的用户问题，\N看看模型如何对它们进行分类。
Dialogue: 1,0:03:23.0,0:03:27.0,Default,,0,0,0,,这是另一个用户留言。告诉我更多\N关于你们的平板电视的信息。
Dialogue: 1,0:03:27.0,0:03:33.0,Default,,0,0,0,,我们只需从模型中获得相同的消\N息列表响应，然后打印出来。
Dialogue: 1,0:03:33.0,0:03:40.0,Default,,0,0,0,,这里我们有第二个分类，看起来是正确的。
Dialogue: 1,0:03:40.0,0:03:49.0,Default,,0,0,0,,所以，总的来说，根据客户询问的\N分类，我们现在可以提供一组更\N具体的指示来处理下一步。
Dialogue: 1,0:03:49.0,0:03:58.0,Default,,0,0,0,,在这种情况下，我们可能会添加关于电视\N的额外信息，而在这种情况下，我们可能想\N要提供一个关闭帐户的链接之类的东西。
Dialogue: 1,0:03:58.0,0:04:03.0,Default,,0,0,0,,我们将在后面的视频中了解更多\N关于处理输入的不同方法。
Dialogue: 1,0:04:03.0,0:04:12.0,Default,,0,0,0,,在下一个视频中，我们将探讨更多评\N估输入的方法，特别是确保用户以负\N责任的方式使用系统的方法。