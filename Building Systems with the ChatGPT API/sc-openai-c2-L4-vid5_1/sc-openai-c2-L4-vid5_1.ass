[Script Info]

Title: sc-openai-c2-L4-vid5_1
ScriptType: v4.00+
WrapStyle: 0
Collisions: Reverse
PlayResX: 384
PlayResY: 288
Timer: 100.0000
ScaledBorderAndShadow: no
Last Style Storage: Default
Video Aspect Ratio: 0
Video Zoom: 6
Video Position: 0

[V4+ Styles]
Format: Name,Fontname,Fontsize,PrimaryColour,SecondaryColour,OutlineColour,BackColour,Bold,Italic,Underline,StrikeOut,ScaleX,ScaleY,Spacing,Angle,BorderStyle,Outline,Shadow,Alignment,MarginL,MarginR,MarginV,Encoding
Style: Default,LXGW WenKai,16,&H0080FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,1,1,6,1
Style: Secondary,Helvetica,10,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,1,1,6,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:10.0,0:00:15.0,Secondary,,0,0,0,,{\an7\fs10\pos(9,11)\fad(300,1000)}翻译：{\1c&H80FFFF&\2c&H0000FF&}Harrison Chase, Andrew Wu
Dialogue: 0,0:00:04.0,0:00:07.44,Secondary,,0,0,0,,In this section, we'll focus on tasks to process inputs,
Dialogue: 0,0:00:07.44,0:00:11.0,Secondary,,0,0,0,,i.e. the tasks that take the input and generate a useful output,
Dialogue: 0,0:00:11.0,0:00:13.88,Secondary,,0,0,0,,often through a series of steps.
Dialogue: 0,0:00:13.88,0:00:17.32,Secondary,,0,0,0,,It is sometimes important for the model to reason in detail about a problem
Dialogue: 0,0:00:19.40,0:00:22.32,Secondary,,0,0,0,,And if you took our previous course: "ChartGPT Prompt Engineering for
Dialogue: 0,0:00:22.32,0:00:25.72,Secondary,,0,0,0,,Developers", you will have seen a number of examples of this.
Dialogue: 0,0:00:25.72,0:00:29.40,Secondary,,0,0,0,,Sometimes a model might make reasoning errors by rushing to an incorrect
Dialogue: 0,0:00:29.40,0:00:33.52,Secondary,,0,0,0,,conclusion, so we can reframe the query to request a series of relevant
Dialogue: 0,0:00:33.52,0:00:37.64,Secondary,,0,0,0,,reasoning steps before the model provides a final answer, so that it can think
Dialogue: 0,0:00:37.64,0:00:40.56,Secondary,,0,0,0,,longer and more methodically about the problem.
Dialogue: 0,0:00:40.56,0:00:43.92,Secondary,,0,0,0,,And in general, we call this strategy of asking the model to reason about
Dialogue: 0,0:00:46.92,0:00:50.56,Secondary,,0,0,0,,For some applications, the reasoning process that a model uses to arrive at
Dialogue: 0,0:00:54.4,0:00:58.52,Secondary,,0,0,0,,For example, in tutoring applications, we may want to encourage students to work
Dialogue: 0,0:00:58.52,0:01:01.68,Secondary,,0,0,0,,on their own answers, but a model's reasoning process about the student's
Dialogue: 0,0:01:01.68,0:01:04.84,Secondary,,0,0,0,,solution could reveal the answer to the student.
Dialogue: 0,0:01:04.84,0:01:08.28,Secondary,,0,0,0,,Inner monologue is a tactic that can be used to mitigate this.
Dialogue: 0,0:01:08.28,0:01:11.96,Secondary,,0,0,0,,And this is just a fancy way of saying, hiding the model's reasoning from the user.
Dialogue: 0,0:01:11.96,0:01:17.28,Secondary,,0,0,0,,The idea of inner monologue is to instruct the model to put parts of the output
Dialogue: 0,0:01:17.28,0:01:22.44,Secondary,,0,0,0,,that are meant to be hidden from the user into a structured format that makes passing them easy.
Dialogue: 0,0:01:22.44,0:01:27.68,Secondary,,0,0,0,,Then, before presenting the output to the user, the output is passed and only part of the output is made visible.
Dialogue: 0,0:01:28.68,0:01:32.68,Secondary,,0,0,0,,So remember the classification problem from a previous video, where we asked
Dialogue: 0,0:01:32.68,0:01:37.88,Secondary,,0,0,0,,the model to classify a customer query into a primary and secondary category.
Dialogue: 0,0:01:37.88,0:01:41.76,Secondary,,0,0,0,,And based on that classification, we might want to take different instructions.
Dialogue: 0,0:01:41.76,0:01:46.88,Secondary,,0,0,0,,Imagine the customer query had been classified into the product information category.
Dialogue: 0,0:01:46.88,0:01:48.20,Secondary,,0,0,0,,In the next instructions,
Dialogue: 0,0:01:48.20,0:01:51.60,Secondary,,0,0,0,,we'll want to include information about the products we have available.
Dialogue: 0,0:01:51.60,0:01:55.20,Secondary,,0,0,0,,And so, in this case, the classification would have been: "Primary,
Dialogue: 0,0:01:58.92,0:02:01.20,Secondary,,0,0,0,,And so let's dive into an example starting from there.
Dialogue: 0,0:02:01.20,0:02:04.16,Secondary,,0,0,0,,So let's start with our usual setup.
Dialogue: 0,0:02:04.16,0:02:13.4,Secondary,,0,0,0,,So for this inner monologue example,
Dialogue: 0,0:02:13.4,0:02:17.24,Secondary,,0,0,0,,we'll start with our same delimiters that we've been using.
Dialogue: 0,0:02:17.24,0:02:19.40,Secondary,,0,0,0,,And now let's go through our system message.
Dialogue: 0,0:02:22.96,0:02:28.56,Secondary,,0,0,0,,And so what we're doing here is asking the model to reason about the answer before coming to its conclusion.
Dialogue: 0,0:02:28.56,0:02:34.56,Secondary,,0,0,0,,So the instruction is: "Follow these steps to answer the customer queries.
Dialogue: 0,0:02:34.56,0:02:39.28,Secondary,,0,0,0,,The customer query will be delimited with four hashtags, our delimiter."
Dialogue: 0,0:02:39.28,0:02:42.8,Secondary,,0,0,0,,So then we've split this up into steps.
Dialogue: 0,0:02:42.8,0:02:45.84,Secondary,,0,0,0,,So the first step is to decide whether the user is asking a question
Dialogue: 0,0:02:48.28,0:02:49.64,Secondary,,0,0,0,,And a product category doesn't count.
Dialogue: 0,0:02:50.76,0:02:54.64,Secondary,,0,0,0,,Step two, so if the user is asking about specific products,
Dialogue: 0,0:02:54.64,0:02:57.44,Secondary,,0,0,0,,identify whether the products are in the following list.
Dialogue: 0,0:02:57.44,0:03:00.40,Secondary,,0,0,0,,And now we've included a list of available products.
Dialogue: 0,0:03:00.40,0:03:09.52,Secondary,,0,0,0,,So here we have five available products that all varieties of laptops and these are all made up products.
Dialogue: 0,0:03:09.52,0:03:11.44,Secondary,,0,0,0,,They were actually generated by GPT-4.
Dialogue: 0,0:03:11.44,0:03:19.44,Secondary,,0,0,0,,In step three, if the message contains products in the list above,
Dialogue: 0,0:03:19.44,0:03:22.48,Secondary,,0,0,0,,list any assumptions that the user is making in their message.
Dialogue: 0,0:03:22.48,0:03:27.32,Secondary,,0,0,0,,For example, that laptop X is bigger than laptop Y or
Dialogue: 0,0:03:27.32,0:03:30.36,Secondary,,0,0,0,,that laptop Z has a two year warranty, for example.
Dialogue: 0,0:03:30.36,0:03:36.28,Secondary,,0,0,0,,Step four is if the user made any assumptions,
Dialogue: 0,0:03:36.28,0:03:39.84,Secondary,,0,0,0,,figure out whether the assumption is true based on your product information.
Dialogue: 0,0:03:39.84,0:03:45.84,Secondary,,0,0,0,,And step five is: "First, politely correct the customer's incorrect assumptions if applicable."
Dialogue: 0,0:03:45.84,0:03:49.28,Secondary,,0,0,0,,Only mention or reference products in the list of five available products.
Dialogue: 0,0:03:49.28,0:03:51.88,Secondary,,0,0,0,,As these are the only five products that the store sells.
Dialogue: 0,0:03:51.88,0:03:54.52,Secondary,,0,0,0,,And answer the customer in a friendly tone.
Dialogue: 0,0:03:54.52,0:04:00.68,Secondary,,0,0,0,,And these kind of very pedantic instructions are probably unnecessary for a more advanced language model like GPT-4.
Dialogue: 0,0:04:00.68,0:04:05.44,Secondary,,0,0,0,,And then we'll ask the model to use the following format.
Dialogue: 0,0:04:05.44,0:04:08.88,Secondary,,0,0,0,,So step one, delimiter, it's reasoning.
Dialogue: 0,0:04:08.88,0:04:12.8,Secondary,,0,0,0,,Step two, delimiter, reasoning, and so on.
Dialogue: 0,0:04:12.8,0:04:18.28,Secondary,,0,0,0,,And using the delimiters will mean that it will be easier for us later to get just this response to the customer.
Dialogue: 0,0:04:18.28,0:04:20.4,Secondary,,0,0,0,,Kind of cut off everything before.
Dialogue: 0,0:04:20.4,0:04:25.80,Secondary,,0,0,0,,So now let's try an example user message.
Dialogue: 0,0:04:25.80,0:04:34.84,Secondary,,0,0,0,,So our message is: "by how much is the BlueWave Chromebook more expensive than the TechPro Desktop?"
Dialogue: 0,0:04:34.84,0:04:36.72,Secondary,,0,0,0,,So let's take a look at these two products.
Dialogue: 0,0:04:36.72,0:04:44.12,Secondary,,0,0,0,,The BlueWave Chromebook is 249.99,
Dialogue: 0,0:04:44.12,0:04:48.36,Secondary,,0,0,0,,and the TechPro Desktop is actually 999.99.
Dialogue: 0,0:04:48.36,0:04:49.44,Secondary,,0,0,0,,This is not actually true.
Dialogue: 0,0:04:49.44,0:04:54.52,Secondary,,0,0,0,,And so let's see how the model handles this user request.
Dialogue: 0,0:04:54.52,0:05:00.36,Secondary,,0,0,0,,So we'll format into our messages array, and we'll get our response.
Dialogue: 0,0:05:00.36,0:05:09.44,Secondary,,0,0,0,,And then we'll print it.
Dialogue: 0,0:05:09.44,0:05:17.20,Secondary,,0,0,0,,And so what we're hoping for
Dialogue: 0,0:05:17.20,0:05:21.0,Secondary,,0,0,0,,is that the model takes all of these different steps and realizes that
Dialogue: 0,0:05:21.0,0:05:23.56,Secondary,,0,0,0,,the user has made an incorrect assumption, and
Dialogue: 0,0:05:23.56,0:05:27.60,Secondary,,0,0,0,,then follows the final step to politely correct the user.
Dialogue: 0,0:05:27.60,0:05:33.60,Secondary,,0,0,0,,And so within this one prompt, we've actually maintained
Dialogue: 0,0:05:33.60,0:05:36.68,Secondary,,0,0,0,,a number of different complex states that the system could be in.
Dialogue: 0,0:05:36.68,0:05:41.16,Secondary,,0,0,0,,So at any given point, there could be a different output from the previous step,
Dialogue: 0,0:05:41.16,0:05:42.88,Secondary,,0,0,0,,and we would want to do something different.
Dialogue: 0,0:05:42.88,0:05:47.96,Secondary,,0,0,0,,For example, if the user hadn't made any assumptions in step three,
Dialogue: 0,0:05:47.96,0:05:50.16,Secondary,,0,0,0,,then in step four, we wouldn't actually have any output.
Dialogue: 0,0:05:50.16,0:05:53.28,Secondary,,0,0,0,,So this is a pretty complicated instruction for the model.
Dialogue: 0,0:05:53.28,0:05:54.44,Secondary,,0,0,0,,So let's see if it did it right.
Dialogue: 0,0:05:54.44,0:06:00.24,Secondary,,0,0,0,,So step one, the user is asking a question about specific products.
Dialogue: 0,0:06:00.24,0:06:03.60,Secondary,,0,0,0,,They're asking about the price difference between these two products.
Dialogue: 0,0:06:03.60,0:06:06.72,Secondary,,0,0,0,,The user assumes that the BlueWave Chromebook is more expensive than
Dialogue: 0,0:06:06.72,0:06:10.84,Secondary,,0,0,0,,the TechBook Pro, and this assumption is actually incorrect.
Dialogue: 0,0:06:10.84,0:06:14.24,Secondary,,0,0,0,,It's reasoning through, taking longer to think about the problem.
Dialogue: 0,0:06:14.24,0:06:18.28,Secondary,,0,0,0,,In the same way that a human would also take some time to reason about
Dialogue: 0,0:06:18.28,0:06:23.64,Secondary,,0,0,0,,an answer to any given question, the model performs better if it also has time to think.
Dialogue: 0,0:06:23.64,0:06:29.80,Secondary,,0,0,0,,And so the final response to the user is the BlueWave Chromebook is actually less expensive than the TechBook Pro.
Dialogue: 0,0:06:29.80,0:06:36.44,Secondary,,0,0,0,,The TechBook Pro desktop costs $999.99, while the BlueWave Chromebook costs $249.99.
Dialogue: 0,0:06:36.44,0:06:42.76,Secondary,,0,0,0,,And so let's see another example of a user message.
Dialogue: 0,0:06:42.76,0:06:46.44,Secondary,,0,0,0,,And also at this point, feel free to pause the video and try your own messages.
Dialogue: 0,0:06:46.44,0:06:51.32,Secondary,,0,0,0,,So let's format this user message.
Dialogue: 0,0:06:51.32,0:06:53.72,Secondary,,0,0,0,,So the question is: "Do you sell TVs?"
Dialogue: 0,0:06:53.72,0:06:58.24,Secondary,,0,0,0,,And if you remember in our product list, we've only listed different computers.
Dialogue: 0,0:06:58.24,0:06:59.96,Secondary,,0,0,0,,So let's see what the model says.
Dialogue: 0,0:06:59.96,0:07:06.72,Secondary,,0,0,0,,So in this case, step one, the user is asking if the store sells TVs, but
Dialogue: 0,0:07:06.72,0:07:08.68,Secondary,,0,0,0,,TVs are not listed in the available products.
Dialogue: 0,0:07:08.68,0:07:12.84,Secondary,,0,0,0,,So as you can see, the model then skips to the response to user step because it
Dialogue: 0,0:07:12.84,0:07:17.96,Secondary,,0,0,0,,realizes that the intermediary steps are not actually necessary.
Dialogue: 0,0:07:17.96,0:07:21.0,Secondary,,0,0,0,,I will say that we did ask for the output in this specific format.
Dialogue: 0,0:07:21.0,0:07:25.0,Secondary,,0,0,0,,So technically, the model hasn't exactly followed our request.
Dialogue: 0,0:07:25.0,0:07:27.92,Secondary,,0,0,0,,Again, more advanced models will be better at doing that.
Dialogue: 0,0:07:27.92,0:07:31.8,Secondary,,0,0,0,,And so in this case, our response to the user is, I'm sorry, but
Dialogue: 0,0:07:31.8,0:07:33.32,Secondary,,0,0,0,,we do not sell TVs at the store.
Dialogue: 0,0:07:33.32,0:07:35.0,Secondary,,0,0,0,,And then it lists the available products.
Dialogue: 0,0:07:35.0,0:07:41.4,Secondary,,0,0,0,,So again, feel free to try some of your own responses.
Dialogue: 0,0:07:41.4,0:07:45.4,Secondary,,0,0,0,,And so now, we only really want this part of the response.
Dialogue: 0,0:07:45.4,0:07:47.88,Secondary,,0,0,0,,We wouldn't want to show the earlier parts to the user.
Dialogue: 0,0:07:47.88,0:07:53.60,Secondary,,0,0,0,,So what we can do is actually just cut the string at the last occurrence
Dialogue: 0,0:07:53.60,0:07:57.52,Secondary,,0,0,0,,of this delimiter token or string of four hashtags.
Dialogue: 0,0:07:57.52,0:08:01.92,Secondary,,0,0,0,,And then only print the final part of the model output.
Dialogue: 0,0:08:01.92,0:08:06.44,Secondary,,0,0,0,,So let's write some code to get only the final part of this string.
Dialogue: 0,0:08:06.44,0:08:12.92,Secondary,,0,0,0,,So we're going to use a try except block to gracefully handle errors in case
Dialogue: 0,0:08:12.92,0:08:15.68,Secondary,,0,0,0,,the model has some kind of unpredictable output and
Dialogue: 0,0:08:15.68,0:08:19.8,Secondary,,0,0,0,,doesn't actually use these characters.
Dialogue: 0,0:08:19.8,0:08:23.56,Secondary,,0,0,0,,And so we're gonna say our final_response is the response.
Dialogue: 0,0:08:23.56,0:08:27.4,Secondary,,0,0,0,,And then we're gonna split the string at the delimiter string.
Dialogue: 0,0:08:27.4,0:08:28.32,Secondary,,0,0,0,,And because we want the final occurrence,
Dialogue: 0,0:08:28.32,0:08:32.88,Secondary,,0,0,0,,we just want to get the last item in the output list.
Dialogue: 0,0:08:32.88,0:08:36.12,Secondary,,0,0,0,,And then we're going to strip any white space.
Dialogue: 0,0:08:36.12,0:08:38.92,Secondary,,0,0,0,,Because as you can see, there might be white space after the characters.
Dialogue: 0,0:08:38.92,0:08:42.12,Secondary,,0,0,0,,Then we're going to catch any errors.
Dialogue: 0,0:08:42.12,0:08:46.56,Secondary,,0,0,0,,And have a fallback response.
Dialogue: 0,0:08:46.56,0:08:52.4,Secondary,,0,0,0,,Which is, sorry.
Dialogue: 0,0:08:58.60,0:09:05.20,Secondary,,0,0,0,,Please try asking another question.
Dialogue: 0,0:09:05.20,0:09:09.64,Secondary,,0,0,0,,And then let's print our final response.
Dialogue: 0,0:09:21.16,0:09:26.84,Secondary,,0,0,0,,And so as you can see, we just cut the string to get this final output.
Dialogue: 0,0:09:26.84,0:09:30.44,Secondary,,0,0,0,,And so this is what we would show to the user if we were building this into an application.
Dialogue: 0,0:09:30.44,0:09:34.36,Secondary,,0,0,0,,And overall, I just want to call out,
Dialogue: 0,0:09:34.36,0:09:38.36,Secondary,,0,0,0,,this prompt might be slightly convoluted for this task.
Dialogue: 0,0:09:38.36,0:09:41.48,Secondary,,0,0,0,,You might not actually need all of these intermediate steps.
Dialogue: 0,0:09:41.48,0:09:47.52,Secondary,,0,0,0,,And so why don't you try and see if you can find an easier way to do the same task in your own prompt.
Dialogue: 0,0:09:50.0,0:09:55.12,Secondary,,0,0,0,,And in general, finding the optimal trade-off in prompt complexity requires some experimentation.
Dialogue: 0,0:09:55.12,0:09:59.0,Secondary,,0,0,0,,So definitely good to try a number of different prompts before deciding to use one.
Dialogue: 0,0:09:59.0,0:10:03.72,Secondary,,0,0,0,,And in the next video, we'll learn another strategy to handle complex tasks
Dialogue: 0,0:10:03.72,0:10:08.0,Secondary,,0,0,0,,by splitting these complex tasks into a series of simpler subtasks,
Dialogue: 0,0:10:08.0,0:10:10.44,Secondary,,0,0,0,,rather than trying to do the whole task in one prompt.
Dialogue: 0,0:00:04.0,0:00:07.44,Default,,0,0,0,,在这个部分，我们将关注处理输入的任务，
Dialogue: 0,0:00:07.44,0:00:11.0,Default,,0,0,0,,即接收输入并生成有用输出的任务，
Dialogue: 0,0:00:11.0,0:00:13.88,Default,,0,0,0,,通常是通过一系列步骤完成的。
Dialogue: 0,0:00:13.88,0:00:19.40,Default,,0,0,0,,有时模型在回答特定问题之\N前需要详细推理问题，
Dialogue: 0,0:00:19.40,0:00:22.32,Default,,0,0,0,,如果你参加过我们之前的课程\N“ChartGPT Prompt Engineering for
Dialogue: 0,0:00:22.32,0:00:25.72,Default,,0,0,0,,Developers”，你会看到\N很多这方面的例子。
Dialogue: 0,0:00:25.72,0:00:29.40,Default,,0,0,0,,有时模型可能会因为急于得\N出结论而出现推理错误，
Dialogue: 0,0:00:29.40,0:00:33.52,Default,,0,0,0,,所以我们可以重新构建查询，\N要求模型进行一系列相关的
Dialogue: 0,0:00:33.52,0:00:37.64,Default,,0,0,0,,推理步骤在给出最终答案之前，这样它就
Dialogue: 0,0:00:37.64,0:00:40.56,Default,,0,0,0,,可以更长时间、更有条理地思考问题。
Dialogue: 0,0:00:40.56,0:00:46.92,Default,,0,0,0,,总的来说，我们把让模型分步推理的策略\N称为链式思维推理（Chain of Thought Reasoning）。
Dialogue: 0,0:00:46.92,0:00:54.4,Default,,0,0,0,,对于某些应用，模型在得出最终答案的过程中\N所使用的推理过程可能不适合与用户共享。
Dialogue: 0,0:00:54.4,0:00:58.52,Default,,0,0,0,,例如，在教学辅导应用中，\N我们可能希望鼓励学生
Dialogue: 0,0:00:58.52,0:01:01.68,Default,,0,0,0,,自己解答问题，但模型对\N学生解答的推理过程
Dialogue: 0,0:01:01.68,0:01:04.84,Default,,0,0,0,,可能会泄露答案给学生。
Dialogue: 0,0:01:04.84,0:01:08.28,Default,,0,0,0,,“内心独白”是一种可以用来\N缓解这个问题的策略。
Dialogue: 0,0:01:08.28,0:01:11.96,Default,,0,0,0,,这只是一种时髦的比喻，\N意思是将模型的推理过程对用户进行隐藏。
Dialogue: 0,0:01:11.96,0:01:17.28,Default,,0,0,0,,内心独白的方案是指示模型\N将输出的某些部分放入结构化格式，
Dialogue: 0,0:01:17.28,0:01:22.44,Default,,0,0,0,,以便将这些内容隐藏起来不让用户看到。
Dialogue: 0,0:01:22.44,0:01:27.68,Default,,0,0,0,,然后，在将输出呈现给用户之前，\N输出内容会被过滤，只有部分内容对用户可见。
Dialogue: 0,0:01:28.68,0:01:32.68,Default,,0,0,0,,所以请记住前一个教学视\N频中的分类问题，我们
Dialogue: 0,0:01:32.68,0:01:37.88,Default,,0,0,0,,要求模型将客户查询分类\N为主要和次要类别。
Dialogue: 0,0:01:37.88,0:01:41.76,Default,,0,0,0,,根据这个分类，我们可能\N想采取不同的指示。
Dialogue: 0,0:01:41.76,0:01:46.88,Default,,0,0,0,,想象一下，客户查询已经被\N归类到产品信息类别。
Dialogue: 0,0:01:46.88,0:01:48.20,Default,,0,0,0,,在接下来的指示中，
Dialogue: 0,0:01:48.20,0:01:51.60,Default,,0,0,0,,我们会想要包含关于我们\N拥有的产品的信息。
Dialogue: 0,0:01:51.60,0:01:58.92,Default,,0,0,0,,所以，在这种情况下，分类将是：\N主类，一般查询，次类，产品信息。
Dialogue: 0,0:01:58.92,0:02:01.20,Default,,0,0,0,,那么让我们从那里开始深入一个例子。
Dialogue: 0,0:02:01.20,0:02:04.16,Default,,0,0,0,,那么让我们从初始设置开始。
Dialogue: 0,0:02:04.16,0:02:13.4,Default,,0,0,0,,对于这个内心独白的例子，
Dialogue: 0,0:02:13.4,0:02:17.24,Default,,0,0,0,,我们将从一直在使用的相同分隔符开始。
Dialogue: 0,0:02:17.24,0:02:19.40,Default,,0,0,0,,现在让我们看一下系统消息。
Dialogue: 0,0:02:22.96,0:02:28.56,Default,,0,0,0,,所以我们在这里所做的是\N在得出结论之前要求模型对答案进行推理。
Dialogue: 0,0:02:28.56,0:02:34.56,Default,,0,0,0,,所以指令是：“按照这些\N步骤回答客户查询。
Dialogue: 0,0:02:34.56,0:02:39.28,Default,,0,0,0,,客户查询将用四个井号分\N隔，我们的分隔符。”
Dialogue: 0,0:02:39.28,0:02:42.8,Default,,0,0,0,,然后我们把这个分成几步。
Dialogue: 0,0:02:42.8,0:02:48.28,Default,,0,0,0,,所以第一步是：决定用户\N是否在询问关于特定产品或产品的问题。
Dialogue: 0,0:02:48.28,0:02:49.64,Default,,0,0,0,,并且产品类别不算数。
Dialogue: 0,0:02:50.76,0:02:54.64,Default,,0,0,0,,第二步，因此，\N如果用户询问有关特定产品的信息，
Dialogue: 0,0:02:54.64,0:02:57.44,Default,,0,0,0,,确定这些产品是否在以下列表中。
Dialogue: 0,0:02:57.44,0:03:00.40,Default,,0,0,0,,现在我们已经包括了一份可用产品清单。
Dialogue: 0,0:03:00.40,0:03:09.52,Default,,0,0,0,,所以这里我们有五种可用的产品，\N它们都是各种类型的笔记本电脑，这些都是虚构的产品。
Dialogue: 0,0:03:09.52,0:03:11.44,Default,,0,0,0,,它们实际上是由GPT-4生成的。
Dialogue: 0,0:03:11.44,0:03:19.44,Default,,0,0,0,,在第三步中，如果消息包\N含上述列表中的产品，
Dialogue: 0,0:03:19.44,0:03:22.48,Default,,0,0,0,,列出用户在其消息中所做的任何假设。
Dialogue: 0,0:03:22.48,0:03:27.32,Default,,0,0,0,,例如，笔记本电脑X比笔记本电脑Y大，或者
Dialogue: 0,0:03:27.32,0:03:30.36,Default,,0,0,0,,例如，笔记本电脑Z有两年保修期。
Dialogue: 0,0:03:30.36,0:03:36.28,Default,,0,0,0,,第四步是，如果用户有任何假设，
Dialogue: 0,0:03:36.28,0:03:39.84,Default,,0,0,0,,根据您的产品信息判断假设是否正确。
Dialogue: 0,0:03:39.84,0:03:45.84,Default,,0,0,0,,第五步是：“首先，\N礼貌地纠正客户的错误假设（如果适用）。”
Dialogue: 0,0:03:45.84,0:03:49.28,Default,,0,0,0,,只提及或参考五个可用产品中的产品。
Dialogue: 0,0:03:49.28,0:03:51.88,Default,,0,0,0,,因为商店目前仅销售这五款产品。
Dialogue: 0,0:03:51.88,0:03:54.52,Default,,0,0,0,,以友好的语气回答客户。
Dialogue: 0,0:03:54.52,0:04:00.68,Default,,0,0,0,,对于像GPT-4这样更高级的语言模型\N来说，这些非常繁琐的指示可能是不必要的。
Dialogue: 0,0:04:00.68,0:04:05.44,Default,,0,0,0,,然后我们将要求模型使用以下格式。
Dialogue: 0,0:04:05.44,0:04:08.88,Default,,0,0,0,,所以第一步，分隔符，它的推理。
Dialogue: 0,0:04:08.88,0:04:12.8,Default,,0,0,0,,第二步，分隔符，推理，依此类推。
Dialogue: 0,0:04:12.8,0:04:18.28,Default,,0,0,0,,使用分隔符意味着我们以后\N更容易将这个回答提供给客户。
Dialogue: 0,0:04:18.28,0:04:20.4,Default,,0,0,0,,把分隔符之前的所有内容都移除。
Dialogue: 0,0:04:20.4,0:04:25.80,Default,,0,0,0,,现在让我们测试一个用户消息。
Dialogue: 0,0:04:25.80,0:04:34.84,Default,,0,0,0,,所以我们的消息是：\N“BlueWave Chromebook比TechPro台式机贵多少？”
Dialogue: 0,0:04:34.84,0:04:36.72,Default,,0,0,0,,那么让我们看看这两款产品。
Dialogue: 0,0:04:36.72,0:04:44.12,Default,,0,0,0,,BlueWave Chromebook售价为249.99美元，
Dialogue: 0,0:04:44.12,0:04:48.36,Default,,0,0,0,,而TechPro台式机实际上\N售价为999.99美元。
Dialogue: 0,0:04:48.36,0:04:49.44,Default,,0,0,0,,这实际上并不正确。
Dialogue: 0,0:04:49.44,0:04:54.52,Default,,0,0,0,,那么让我们看看模型如何\N处理这个用户请求。
Dialogue: 0,0:04:54.52,0:05:00.36,Default,,0,0,0,,所以我们将其格式化为\N我们的消息数组，然后我们会得到返回结果。
Dialogue: 0,0:05:00.36,0:05:09.44,Default,,0,0,0,,然后我们会打印出来。
Dialogue: 0,0:05:09.44,0:05:17.20,Default,,0,0,0,,所以我们希望的是
Dialogue: 0,0:05:17.20,0:05:21.0,Default,,0,0,0,,模型能够理解所有这些\N不同的步骤，并意识到
Dialogue: 0,0:05:21.0,0:05:23.56,Default,,0,0,0,,用户做出了错误的假设，然后
Dialogue: 0,0:05:23.56,0:05:27.60,Default,,0,0,0,,在最后一步礼貌地纠正用户。
Dialogue: 0,0:05:27.60,0:05:33.60,Default,,0,0,0,,所以在这一个提示（Prompt）中，\N我们实际上保持了
Dialogue: 0,0:05:33.60,0:05:36.68,Default,,0,0,0,,系统可能处于的许多不同的复杂状态。
Dialogue: 0,0:05:36.68,0:05:41.16,Default,,0,0,0,,所以在任何给定的时刻，\N都可能有来自前一步的不同输出，
Dialogue: 0,0:05:41.16,0:05:42.88,Default,,0,0,0,,我们会想要做一些不同的事情。
Dialogue: 0,0:05:42.88,0:05:47.96,Default,,0,0,0,,例如，如果用户在第三步没有做任何假设，
Dialogue: 0,0:05:47.96,0:05:50.16,Default,,0,0,0,,那么在第四步，\N我们实际上不会有任何输出。
Dialogue: 0,0:05:50.16,0:05:53.28,Default,,0,0,0,,所以这对模型来说是一\N个相当复杂的指令。
Dialogue: 0,0:05:53.28,0:05:54.44,Default,,0,0,0,,那么让我们看看它是否做对了。
Dialogue: 0,0:05:54.44,0:06:00.24,Default,,0,0,0,,所以第一步，用户在询问\N关于特定产品的问题。
Dialogue: 0,0:06:00.24,0:06:03.60,Default,,0,0,0,,他们在询问这两款产品之间的价格差异。
Dialogue: 0,0:06:03.60,0:06:06.72,Default,,0,0,0,,用户认为BlueWave Chromebook比
Dialogue: 0,0:06:06.72,0:06:10.84,Default,,0,0,0,,TechBook Pro更贵，\N而这个假设实际上是错误的。
Dialogue: 0,0:06:10.84,0:06:14.24,Default,,0,0,0,,它通过推理，花更长的时\N间来思考这个问题。
Dialogue: 0,0:06:14.24,0:06:18.28,Default,,0,0,0,,就像人类在回答任何问题时\N也需要花一些时间来推理一样，
Dialogue: 0,0:06:18.28,0:06:23.64,Default,,0,0,0,,如果模型也有时间去思\N考，它的表现会更好。
Dialogue: 0,0:06:23.64,0:06:29.80,Default,,0,0,0,,所以最后对用户的回答是\NBlueWave Chromebook实际上比TechBook Pro便宜。
Dialogue: 0,0:06:29.80,0:06:36.44,Default,,0,0,0,,TechBook Pro台式电脑售价为999.99美元，\N而BlueWave Chromebook售价为249.99美元。
Dialogue: 0,0:06:36.44,0:06:42.76,Default,,0,0,0,,让我们看另一个用户消息的例子。
Dialogue: 0,0:06:42.76,0:06:46.44,Default,,0,0,0,,此时，也可以随时暂停视频，\N尝试您自己的消息。
Dialogue: 0,0:06:46.44,0:06:51.32,Default,,0,0,0,,让我们格式化这个用户消息。
Dialogue: 0,0:06:51.32,0:06:53.72,Default,,0,0,0,,所以问题是：“你们卖电视吗？”
Dialogue: 0,0:06:53.72,0:06:58.24,Default,,0,0,0,,如果您还记得我们的产品列表中，\N我们只列出了不同的电脑。
Dialogue: 0,0:06:58.24,0:06:59.96,Default,,0,0,0,,让我们看看模型会说什么。
Dialogue: 0,0:06:59.96,0:07:06.72,Default,,0,0,0,,所以在这种情况下，第一步，\N用户询问商店是否出售电视，但是
Dialogue: 0,0:07:06.72,0:07:08.68,Default,,0,0,0,,电视并未列在可用产品中。
Dialogue: 0,0:07:08.68,0:07:12.84,Default,,0,0,0,,因此，如您所见，模型\N接着跳到回应用户的步骤，因为它
Dialogue: 0,0:07:12.84,0:07:17.96,Default,,0,0,0,,意识到中间步骤实际上并不需要。
Dialogue: 0,0:07:17.96,0:07:21.0,Default,,0,0,0,,我要说的是，我们确实要求\N以这种特定格式输出。
Dialogue: 0,0:07:21.0,0:07:25.0,Default,,0,0,0,,从技术上讲，模型并没有\N完全遵循我们的要求。
Dialogue: 0,0:07:25.0,0:07:27.92,Default,,0,0,0,,再次强调，更先进的模型\N会更擅长做到这一点。
Dialogue: 0,0:07:27.92,0:07:31.8,Default,,0,0,0,,在这种情况下，\N我们对用户的回复是：“对不起，但是
Dialogue: 0,0:07:31.8,0:07:33.32,Default,,0,0,0,,我们商店里不卖电视。”
Dialogue: 0,0:07:33.32,0:07:35.0,Default,,0,0,0,,然后列出了可用的产品。
Dialogue: 0,0:07:35.0,0:07:41.4,Default,,0,0,0,,请随意尝试一些您自己的回答。
Dialogue: 0,0:07:41.4,0:07:45.4,Default,,0,0,0,,现在，我们只想要这部分返回的内容。
Dialogue: 0,0:07:45.4,0:07:47.88,Default,,0,0,0,,我们不想把前面的部分展示给用户。
Dialogue: 0,0:07:47.88,0:07:53.60,Default,,0,0,0,,所以我们可以做的\N实际上就是在最后一次出现
Dialogue: 0,0:07:53.60,0:07:57.52,Default,,0,0,0,,这个分隔符标记\N或四个井号字符串的地方分割字符串。
Dialogue: 0,0:07:57.52,0:08:01.92,Default,,0,0,0,,然后只打印模型输出的最后一部分。
Dialogue: 0,0:08:01.92,0:08:06.44,Default,,0,0,0,,让我们编写代码来获取这个\N字符串的最后一部分。
Dialogue: 0,0:08:06.44,0:08:12.92,Default,,0,0,0,,因此，我们将使用一个\N try except 块来优雅地处理错误，以防
Dialogue: 0,0:08:12.92,0:08:15.68,Default,,0,0,0,,模型有某种不可预测的输出，而且
Dialogue: 0,0:08:15.68,0:08:19.8,Default,,0,0,0,,实际上并不使用这些字符。
Dialogue: 0,0:08:19.8,0:08:23.56,Default,,0,0,0,,我们要将response变量\N赋值给final_response。
Dialogue: 0,0:08:23.56,0:08:27.4,Default,,0,0,0,,然后我们要使用分隔符来\N将字符串分割成数组。
Dialogue: 0,0:08:27.4,0:08:28.32,Default,,0,0,0,,因为我们想要找到它最\N后一次出现的位置，
Dialogue: 0,0:08:28.32,0:08:32.88,Default,,0,0,0,,然后只想要输出数组中的最后一项。
Dialogue: 0,0:08:32.88,0:08:36.12,Default,,0,0,0,,最后再去除前后空格。
Dialogue: 0,0:08:36.12,0:08:38.92,Default,,0,0,0,,因为如您所见，字符后面可能会有空格。
Dialogue: 0,0:08:38.92,0:08:42.12,Default,,0,0,0,,然后我们要处理任何可能得异常错误。
Dialogue: 0,0:08:42.12,0:08:46.56,Default,,0,0,0,,并有一个备用返回结果。
Dialogue: 0,0:08:46.56,0:08:58.60,Default,,0,0,0,,那就是：\N“对不起，我现在遇到了麻烦。
Dialogue: 0,0:08:58.60,0:09:05.20,Default,,0,0,0,,请尝试提问另一个问题。”
Dialogue: 0,0:09:05.20,0:09:09.64,Default,,0,0,0,,然后让我们打印最终结果。
Dialogue: 0,0:09:21.16,0:09:26.84,Default,,0,0,0,,如您所见，我们只是\N对字符串裁剪，从而获得最终输出。
Dialogue: 0,0:09:26.84,0:09:30.44,Default,,0,0,0,,如果我们将它集成到应用程序中，\N这就是我们要向用户展示的内容。
Dialogue: 0,0:09:30.44,0:09:34.36,Default,,0,0,0,,总的来说，我只是想指出，
Dialogue: 0,0:09:34.36,0:09:38.36,Default,,0,0,0,,这个提示（Prompt）\N对于这个任务可能有些复杂。
Dialogue: 0,0:09:38.36,0:09:41.48,Default,,0,0,0,,你实际上可能不需要所有这些中间步骤。
Dialogue: 0,0:09:41.48,0:09:47.52,Default,,0,0,0,,所以，为什么不尝试看看\N你能否在你自己的提示（Prompt）中\N找到一种更简单的方法来完成相同的任务。
Dialogue: 0,0:09:50.0,0:09:55.12,Default,,0,0,0,,总的来说，需要反复尝试\N才能找到提示（Prompt）\N的最佳平衡点。
Dialogue: 0,0:09:55.12,0:09:59.0,Default,,0,0,0,,所以在决定使用一个\N提示（Prompt）之前，最好尝试\N多种不同的提示（Prompt）。
Dialogue: 0,0:09:59.0,0:10:03.72,Default,,0,0,0,,在下一个视频中，\N我们将学习另一种处理复杂任务的策略，
Dialogue: 0,0:10:03.72,0:10:08.0,Default,,0,0,0,,通过将这些复杂任务分解成\N一系列更简单的子任务，
Dialogue: 0,0:10:08.0,0:10:10.44,Default,,0,0,0,,而不是试图在一个\N提示（Prompt）中完成整个任务。