在这个视频中，我们将把前面几个视频中学到的所有知识整合在一起，创建
一个端到端的客户服务助手示例。
我们将执行以下步骤：
首先，我们会检查输入内容，看是否触发了内容审核 API。
其次，如果没有，我们将提取产品列表。
第三，如果找到了产品，我们会尝试查找它们。
第四，我们将用模型回答用户的问题。
最后，我们会将答案通过内容审核 API检查。
如果没有被标记有问题，我们会将答案返回给用户。
我们已经有了相关设置。
这里新增了一个额外的引用。
这是一个用于聊天机器人界面的Python包。
我要粘贴一个处理用户消息的函数。
实际上，我先运行一个例子，然后我们再讨论这个函数。
这是一段我们一直在使用的用户输入：
“告诉我关于SmartX pro手机和相机的信息。
还告诉我关于电视的信息。”
那我们来运行这个。
首先，我们来运行这个。
正如你所看到的，我们正在通过这些步骤来回答用户的问题。
第一步是审核步骤。
第二步是提取产品列表。
第三步是查找产品信息。
现在有了这些产品信息，模型正试图回答这个问题，
正如我们在之前的视频中看到的。
最后，它再次通过审核API处理返回结果，以确保对用户展示的内容是安全的。
这就是我们现在熟悉的返回结果。
让我们浏览一下代码看这里发生了什么。
有一个辅助函数process_user_message。
它接收用户输入，即当前消息，以及到目前为止的所有消息数组。
这就是我们构建聊天机器人界面的时候。
首先，检查输入是否触发了审查API。
我们在之前的视频中讲过这个。
如果输入被标记，那么告诉用户我们无法处理这个请求。
如果没有被标记，尝试提取产品列表，就像在之前的视频中那样。
然后尝试查找产品。
在这种情况下，如果没有找到产品，这将只是一个空字符串。
然后我们回答用户的问题。
我们提供了对话历史和带有相关产品信息的新消息。
我们得到了返回结果。
然后我们将这个返回结果通过审核 API检查。
如果被标记，我们会告诉用户我们无法提供这个信息。
也许我们会说一些类似，“让我帮你转接人工服务。”
然后你可以采取一些后续步骤。
让我们用一个漂亮的界面把这些都整合起来，试着进行一次对话。
这里有一个功能，只要我们与助手互动，这些消息就会被累积起来。
请随时暂停视频，以更详细地了解这是如何工作的。
当然，对刚才非常长的处理用户消息功能的那部分，您也可以一样随时暂停去详细了解。

现在我们要粘贴代码来显示聊天机器人界面。
那么，如果我们运行这个，现在让我们尝试和客服助手进行对话。
那我们问一下：“你们有哪些电视？”
在后台，助手正在执行处理用户消息功能中的所有步骤。
它列出了各种不同的电视。
现在我们再问：“哪个最便宜？”
同样，它还在执行所有相同的步骤，但这次它还将历史会话一起传递到Prompt中。
好的，它告诉我们这个扬声器是我们拥有的最便宜的与电视相关的产品。
有意思。
我们看看最贵的是什么。
最贵的电视是 Cineview 8K 电视。
那我们来了解更多关于它的信息吧。
跟我说说更多关于它的事。
我们收到了关于这台电视的更多信息。
在这个例子中，我们将在课程中学到的技巧结合起来，创建了
一个包含一系列步骤的综合系统，用于评估用户输入、处理它们，
然后检查输出。
通过监控更多输入的系统质量，
你可以改变步骤，提高系统的整体性能。
也许会发现我们的Prompt在某些步骤上可以做得更好。
也许有些步骤甚至不需要。
你会找到更好的检索方法，等等。
我们将在下一个视频中进一步讨论这个问题。